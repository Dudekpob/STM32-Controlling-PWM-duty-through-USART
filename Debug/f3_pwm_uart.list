
f3_pwm_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cb4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003e3c  08003e3c  00013e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e74  08003e74  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003e74  08003e74  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e74  08003e74  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e74  08003e74  00013e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e78  08003e78  00013e78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003e7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000f4  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000100  20000100  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ad8a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a31  00000000  00000000  0002adc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000768  00000000  00000000  0002c7f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000006d0  00000000  00000000  0002cf60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c493  00000000  00000000  0002d630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a6ef  00000000  00000000  00049ac3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a9947  00000000  00000000  000541b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000fdaf9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001cc8  00000000  00000000  000fdb4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003e24 	.word	0x08003e24

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003e24 	.word	0x08003e24

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fa8a 	bl	80006e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f828 	bl	8000224 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f8ca 	bl	800036c <MX_GPIO_Init>
  MX_DMA_Init();
 80001d8:	f000 f8aa 	bl	8000330 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80001dc:	f000 f878 	bl	80002d0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  HAL_UART_Receive_DMA (&huart1, UART1_rxBuffer, 12);
 80001e0:	220c      	movs	r2, #12
 80001e2:	4902      	ldr	r1, [pc, #8]	; (80001ec <main+0x24>)
 80001e4:	4802      	ldr	r0, [pc, #8]	; (80001f0 <main+0x28>)
 80001e6:	f002 fcb7 	bl	8002b58 <HAL_UART_Receive_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001ea:	e7fe      	b.n	80001ea <main+0x22>
 80001ec:	20000028 	.word	0x20000028
 80001f0:	20000034 	.word	0x20000034

080001f4 <HAL_UART_RxCpltCallback>:
  }
  /* USER CODE END 3 */
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b082      	sub	sp, #8
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, UART1_rxBuffer, 12, 100);
 80001fc:	2364      	movs	r3, #100	; 0x64
 80001fe:	220c      	movs	r2, #12
 8000200:	4906      	ldr	r1, [pc, #24]	; (800021c <HAL_UART_RxCpltCallback+0x28>)
 8000202:	4807      	ldr	r0, [pc, #28]	; (8000220 <HAL_UART_RxCpltCallback+0x2c>)
 8000204:	f002 fc14 	bl	8002a30 <HAL_UART_Transmit>
    HAL_UART_Receive_DMA(&huart1, UART1_rxBuffer, 12);
 8000208:	220c      	movs	r2, #12
 800020a:	4904      	ldr	r1, [pc, #16]	; (800021c <HAL_UART_RxCpltCallback+0x28>)
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <HAL_UART_RxCpltCallback+0x2c>)
 800020e:	f002 fca3 	bl	8002b58 <HAL_UART_Receive_DMA>
}
 8000212:	bf00      	nop
 8000214:	3708      	adds	r7, #8
 8000216:	46bd      	mov	sp, r7
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	20000028 	.word	0x20000028
 8000220:	20000034 	.word	0x20000034

08000224 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b09e      	sub	sp, #120	; 0x78
 8000228:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800022a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800022e:	2228      	movs	r2, #40	; 0x28
 8000230:	2100      	movs	r1, #0
 8000232:	4618      	mov	r0, r3
 8000234:	f003 fdee 	bl	8003e14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000238:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800023c:	2200      	movs	r2, #0
 800023e:	601a      	str	r2, [r3, #0]
 8000240:	605a      	str	r2, [r3, #4]
 8000242:	609a      	str	r2, [r3, #8]
 8000244:	60da      	str	r2, [r3, #12]
 8000246:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000248:	463b      	mov	r3, r7
 800024a:	223c      	movs	r2, #60	; 0x3c
 800024c:	2100      	movs	r1, #0
 800024e:	4618      	mov	r0, r3
 8000250:	f003 fde0 	bl	8003e14 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000254:	2302      	movs	r3, #2
 8000256:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000258:	2301      	movs	r3, #1
 800025a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800025c:	2310      	movs	r3, #16
 800025e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000260:	2302      	movs	r3, #2
 8000262:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000264:	2300      	movs	r3, #0
 8000266:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000268:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 800026c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800026e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000272:	4618      	mov	r0, r3
 8000274:	f000 ff6a 	bl	800114c <HAL_RCC_OscConfig>
 8000278:	4603      	mov	r3, r0
 800027a:	2b00      	cmp	r3, #0
 800027c:	d001      	beq.n	8000282 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800027e:	f000 f917 	bl	80004b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000282:	230f      	movs	r3, #15
 8000284:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000286:	2302      	movs	r3, #2
 8000288:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800028a:	2300      	movs	r3, #0
 800028c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800028e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000292:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000294:	2300      	movs	r3, #0
 8000296:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000298:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800029c:	2101      	movs	r1, #1
 800029e:	4618      	mov	r0, r3
 80002a0:	f001 ff92 	bl	80021c8 <HAL_RCC_ClockConfig>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d001      	beq.n	80002ae <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80002aa:	f000 f901 	bl	80004b0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80002ae:	2301      	movs	r3, #1
 80002b0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80002b2:	2300      	movs	r3, #0
 80002b4:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002b6:	463b      	mov	r3, r7
 80002b8:	4618      	mov	r0, r3
 80002ba:	f002 f9bb 	bl	8002634 <HAL_RCCEx_PeriphCLKConfig>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d001      	beq.n	80002c8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80002c4:	f000 f8f4 	bl	80004b0 <Error_Handler>
  }
}
 80002c8:	bf00      	nop
 80002ca:	3778      	adds	r7, #120	; 0x78
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}

080002d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002d4:	4b14      	ldr	r3, [pc, #80]	; (8000328 <MX_USART1_UART_Init+0x58>)
 80002d6:	4a15      	ldr	r2, [pc, #84]	; (800032c <MX_USART1_UART_Init+0x5c>)
 80002d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80002da:	4b13      	ldr	r3, [pc, #76]	; (8000328 <MX_USART1_UART_Init+0x58>)
 80002dc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80002e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002e2:	4b11      	ldr	r3, [pc, #68]	; (8000328 <MX_USART1_UART_Init+0x58>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002e8:	4b0f      	ldr	r3, [pc, #60]	; (8000328 <MX_USART1_UART_Init+0x58>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002ee:	4b0e      	ldr	r3, [pc, #56]	; (8000328 <MX_USART1_UART_Init+0x58>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002f4:	4b0c      	ldr	r3, [pc, #48]	; (8000328 <MX_USART1_UART_Init+0x58>)
 80002f6:	220c      	movs	r2, #12
 80002f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002fa:	4b0b      	ldr	r3, [pc, #44]	; (8000328 <MX_USART1_UART_Init+0x58>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000300:	4b09      	ldr	r3, [pc, #36]	; (8000328 <MX_USART1_UART_Init+0x58>)
 8000302:	2200      	movs	r2, #0
 8000304:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000306:	4b08      	ldr	r3, [pc, #32]	; (8000328 <MX_USART1_UART_Init+0x58>)
 8000308:	2200      	movs	r2, #0
 800030a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800030c:	4b06      	ldr	r3, [pc, #24]	; (8000328 <MX_USART1_UART_Init+0x58>)
 800030e:	2200      	movs	r2, #0
 8000310:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000312:	4805      	ldr	r0, [pc, #20]	; (8000328 <MX_USART1_UART_Init+0x58>)
 8000314:	f002 fb3e 	bl	8002994 <HAL_UART_Init>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800031e:	f000 f8c7 	bl	80004b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000322:	bf00      	nop
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	20000034 	.word	0x20000034
 800032c:	40013800 	.word	0x40013800

08000330 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b082      	sub	sp, #8
 8000334:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000336:	4b0c      	ldr	r3, [pc, #48]	; (8000368 <MX_DMA_Init+0x38>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	4a0b      	ldr	r2, [pc, #44]	; (8000368 <MX_DMA_Init+0x38>)
 800033c:	f043 0301 	orr.w	r3, r3, #1
 8000340:	6153      	str	r3, [r2, #20]
 8000342:	4b09      	ldr	r3, [pc, #36]	; (8000368 <MX_DMA_Init+0x38>)
 8000344:	695b      	ldr	r3, [r3, #20]
 8000346:	f003 0301 	and.w	r3, r3, #1
 800034a:	607b      	str	r3, [r7, #4]
 800034c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800034e:	2200      	movs	r2, #0
 8000350:	2100      	movs	r1, #0
 8000352:	200f      	movs	r0, #15
 8000354:	f000 fb07 	bl	8000966 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000358:	200f      	movs	r0, #15
 800035a:	f000 fb20 	bl	800099e <HAL_NVIC_EnableIRQ>

}
 800035e:	bf00      	nop
 8000360:	3708      	adds	r7, #8
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	40021000 	.word	0x40021000

0800036c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b08a      	sub	sp, #40	; 0x28
 8000370:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000372:	f107 0314 	add.w	r3, r7, #20
 8000376:	2200      	movs	r2, #0
 8000378:	601a      	str	r2, [r3, #0]
 800037a:	605a      	str	r2, [r3, #4]
 800037c:	609a      	str	r2, [r3, #8]
 800037e:	60da      	str	r2, [r3, #12]
 8000380:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000382:	4b48      	ldr	r3, [pc, #288]	; (80004a4 <MX_GPIO_Init+0x138>)
 8000384:	695b      	ldr	r3, [r3, #20]
 8000386:	4a47      	ldr	r2, [pc, #284]	; (80004a4 <MX_GPIO_Init+0x138>)
 8000388:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800038c:	6153      	str	r3, [r2, #20]
 800038e:	4b45      	ldr	r3, [pc, #276]	; (80004a4 <MX_GPIO_Init+0x138>)
 8000390:	695b      	ldr	r3, [r3, #20]
 8000392:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000396:	613b      	str	r3, [r7, #16]
 8000398:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800039a:	4b42      	ldr	r3, [pc, #264]	; (80004a4 <MX_GPIO_Init+0x138>)
 800039c:	695b      	ldr	r3, [r3, #20]
 800039e:	4a41      	ldr	r2, [pc, #260]	; (80004a4 <MX_GPIO_Init+0x138>)
 80003a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003a4:	6153      	str	r3, [r2, #20]
 80003a6:	4b3f      	ldr	r3, [pc, #252]	; (80004a4 <MX_GPIO_Init+0x138>)
 80003a8:	695b      	ldr	r3, [r3, #20]
 80003aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80003ae:	60fb      	str	r3, [r7, #12]
 80003b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003b2:	4b3c      	ldr	r3, [pc, #240]	; (80004a4 <MX_GPIO_Init+0x138>)
 80003b4:	695b      	ldr	r3, [r3, #20]
 80003b6:	4a3b      	ldr	r2, [pc, #236]	; (80004a4 <MX_GPIO_Init+0x138>)
 80003b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80003bc:	6153      	str	r3, [r2, #20]
 80003be:	4b39      	ldr	r3, [pc, #228]	; (80004a4 <MX_GPIO_Init+0x138>)
 80003c0:	695b      	ldr	r3, [r3, #20]
 80003c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80003c6:	60bb      	str	r3, [r7, #8]
 80003c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ca:	4b36      	ldr	r3, [pc, #216]	; (80004a4 <MX_GPIO_Init+0x138>)
 80003cc:	695b      	ldr	r3, [r3, #20]
 80003ce:	4a35      	ldr	r2, [pc, #212]	; (80004a4 <MX_GPIO_Init+0x138>)
 80003d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003d4:	6153      	str	r3, [r2, #20]
 80003d6:	4b33      	ldr	r3, [pc, #204]	; (80004a4 <MX_GPIO_Init+0x138>)
 80003d8:	695b      	ldr	r3, [r3, #20]
 80003da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003de:	607b      	str	r3, [r7, #4]
 80003e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003e2:	4b30      	ldr	r3, [pc, #192]	; (80004a4 <MX_GPIO_Init+0x138>)
 80003e4:	695b      	ldr	r3, [r3, #20]
 80003e6:	4a2f      	ldr	r2, [pc, #188]	; (80004a4 <MX_GPIO_Init+0x138>)
 80003e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80003ec:	6153      	str	r3, [r2, #20]
 80003ee:	4b2d      	ldr	r3, [pc, #180]	; (80004a4 <MX_GPIO_Init+0x138>)
 80003f0:	695b      	ldr	r3, [r3, #20]
 80003f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80003f6:	603b      	str	r3, [r7, #0]
 80003f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80003fa:	2200      	movs	r2, #0
 80003fc:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000400:	4829      	ldr	r0, [pc, #164]	; (80004a8 <MX_GPIO_Init+0x13c>)
 8000402:	f000 fe8b 	bl	800111c <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000406:	2337      	movs	r3, #55	; 0x37
 8000408:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800040a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800040e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000410:	2300      	movs	r3, #0
 8000412:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000414:	f107 0314 	add.w	r3, r7, #20
 8000418:	4619      	mov	r1, r3
 800041a:	4823      	ldr	r0, [pc, #140]	; (80004a8 <MX_GPIO_Init+0x13c>)
 800041c:	f000 fd04 	bl	8000e28 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000420:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000424:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000426:	2301      	movs	r3, #1
 8000428:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800042a:	2300      	movs	r3, #0
 800042c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800042e:	2300      	movs	r3, #0
 8000430:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000432:	f107 0314 	add.w	r3, r7, #20
 8000436:	4619      	mov	r1, r3
 8000438:	481b      	ldr	r0, [pc, #108]	; (80004a8 <MX_GPIO_Init+0x13c>)
 800043a:	f000 fcf5 	bl	8000e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800043e:	2301      	movs	r3, #1
 8000440:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000442:	2300      	movs	r3, #0
 8000444:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000446:	2300      	movs	r3, #0
 8000448:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800044a:	f107 0314 	add.w	r3, r7, #20
 800044e:	4619      	mov	r1, r3
 8000450:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000454:	f000 fce8 	bl	8000e28 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MISOA7_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000458:	23e0      	movs	r3, #224	; 0xe0
 800045a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800045c:	2302      	movs	r3, #2
 800045e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000460:	2300      	movs	r3, #0
 8000462:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000464:	2300      	movs	r3, #0
 8000466:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000468:	2305      	movs	r3, #5
 800046a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800046c:	f107 0314 	add.w	r3, r7, #20
 8000470:	4619      	mov	r1, r3
 8000472:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000476:	f000 fcd7 	bl	8000e28 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800047a:	23c0      	movs	r3, #192	; 0xc0
 800047c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800047e:	2312      	movs	r3, #18
 8000480:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000482:	2300      	movs	r3, #0
 8000484:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000486:	2300      	movs	r3, #0
 8000488:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800048a:	2304      	movs	r3, #4
 800048c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800048e:	f107 0314 	add.w	r3, r7, #20
 8000492:	4619      	mov	r1, r3
 8000494:	4805      	ldr	r0, [pc, #20]	; (80004ac <MX_GPIO_Init+0x140>)
 8000496:	f000 fcc7 	bl	8000e28 <HAL_GPIO_Init>

}
 800049a:	bf00      	nop
 800049c:	3728      	adds	r7, #40	; 0x28
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	40021000 	.word	0x40021000
 80004a8:	48001000 	.word	0x48001000
 80004ac:	48000400 	.word	0x48000400

080004b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004b4:	b672      	cpsid	i
}
 80004b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004b8:	e7fe      	b.n	80004b8 <Error_Handler+0x8>
	...

080004bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004c2:	4b0f      	ldr	r3, [pc, #60]	; (8000500 <HAL_MspInit+0x44>)
 80004c4:	699b      	ldr	r3, [r3, #24]
 80004c6:	4a0e      	ldr	r2, [pc, #56]	; (8000500 <HAL_MspInit+0x44>)
 80004c8:	f043 0301 	orr.w	r3, r3, #1
 80004cc:	6193      	str	r3, [r2, #24]
 80004ce:	4b0c      	ldr	r3, [pc, #48]	; (8000500 <HAL_MspInit+0x44>)
 80004d0:	699b      	ldr	r3, [r3, #24]
 80004d2:	f003 0301 	and.w	r3, r3, #1
 80004d6:	607b      	str	r3, [r7, #4]
 80004d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004da:	4b09      	ldr	r3, [pc, #36]	; (8000500 <HAL_MspInit+0x44>)
 80004dc:	69db      	ldr	r3, [r3, #28]
 80004de:	4a08      	ldr	r2, [pc, #32]	; (8000500 <HAL_MspInit+0x44>)
 80004e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004e4:	61d3      	str	r3, [r2, #28]
 80004e6:	4b06      	ldr	r3, [pc, #24]	; (8000500 <HAL_MspInit+0x44>)
 80004e8:	69db      	ldr	r3, [r3, #28]
 80004ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004ee:	603b      	str	r3, [r7, #0]
 80004f0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80004f2:	2007      	movs	r0, #7
 80004f4:	f000 fa2c 	bl	8000950 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004f8:	bf00      	nop
 80004fa:	3708      	adds	r7, #8
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	40021000 	.word	0x40021000

08000504 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b08a      	sub	sp, #40	; 0x28
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050c:	f107 0314 	add.w	r3, r7, #20
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
 8000514:	605a      	str	r2, [r3, #4]
 8000516:	609a      	str	r2, [r3, #8]
 8000518:	60da      	str	r2, [r3, #12]
 800051a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a2e      	ldr	r2, [pc, #184]	; (80005dc <HAL_UART_MspInit+0xd8>)
 8000522:	4293      	cmp	r3, r2
 8000524:	d155      	bne.n	80005d2 <HAL_UART_MspInit+0xce>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000526:	4b2e      	ldr	r3, [pc, #184]	; (80005e0 <HAL_UART_MspInit+0xdc>)
 8000528:	699b      	ldr	r3, [r3, #24]
 800052a:	4a2d      	ldr	r2, [pc, #180]	; (80005e0 <HAL_UART_MspInit+0xdc>)
 800052c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000530:	6193      	str	r3, [r2, #24]
 8000532:	4b2b      	ldr	r3, [pc, #172]	; (80005e0 <HAL_UART_MspInit+0xdc>)
 8000534:	699b      	ldr	r3, [r3, #24]
 8000536:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800053a:	613b      	str	r3, [r7, #16]
 800053c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800053e:	4b28      	ldr	r3, [pc, #160]	; (80005e0 <HAL_UART_MspInit+0xdc>)
 8000540:	695b      	ldr	r3, [r3, #20]
 8000542:	4a27      	ldr	r2, [pc, #156]	; (80005e0 <HAL_UART_MspInit+0xdc>)
 8000544:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000548:	6153      	str	r3, [r2, #20]
 800054a:	4b25      	ldr	r3, [pc, #148]	; (80005e0 <HAL_UART_MspInit+0xdc>)
 800054c:	695b      	ldr	r3, [r3, #20]
 800054e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000552:	60fb      	str	r3, [r7, #12]
 8000554:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000556:	2330      	movs	r3, #48	; 0x30
 8000558:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800055a:	2302      	movs	r3, #2
 800055c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055e:	2300      	movs	r3, #0
 8000560:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000562:	2303      	movs	r3, #3
 8000564:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000566:	2307      	movs	r3, #7
 8000568:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800056a:	f107 0314 	add.w	r3, r7, #20
 800056e:	4619      	mov	r1, r3
 8000570:	481c      	ldr	r0, [pc, #112]	; (80005e4 <HAL_UART_MspInit+0xe0>)
 8000572:	f000 fc59 	bl	8000e28 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000576:	4b1c      	ldr	r3, [pc, #112]	; (80005e8 <HAL_UART_MspInit+0xe4>)
 8000578:	4a1c      	ldr	r2, [pc, #112]	; (80005ec <HAL_UART_MspInit+0xe8>)
 800057a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800057c:	4b1a      	ldr	r3, [pc, #104]	; (80005e8 <HAL_UART_MspInit+0xe4>)
 800057e:	2200      	movs	r2, #0
 8000580:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000582:	4b19      	ldr	r3, [pc, #100]	; (80005e8 <HAL_UART_MspInit+0xe4>)
 8000584:	2200      	movs	r2, #0
 8000586:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000588:	4b17      	ldr	r3, [pc, #92]	; (80005e8 <HAL_UART_MspInit+0xe4>)
 800058a:	2280      	movs	r2, #128	; 0x80
 800058c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800058e:	4b16      	ldr	r3, [pc, #88]	; (80005e8 <HAL_UART_MspInit+0xe4>)
 8000590:	2200      	movs	r2, #0
 8000592:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000594:	4b14      	ldr	r3, [pc, #80]	; (80005e8 <HAL_UART_MspInit+0xe4>)
 8000596:	2200      	movs	r2, #0
 8000598:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800059a:	4b13      	ldr	r3, [pc, #76]	; (80005e8 <HAL_UART_MspInit+0xe4>)
 800059c:	2200      	movs	r2, #0
 800059e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80005a0:	4b11      	ldr	r3, [pc, #68]	; (80005e8 <HAL_UART_MspInit+0xe4>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80005a6:	4810      	ldr	r0, [pc, #64]	; (80005e8 <HAL_UART_MspInit+0xe4>)
 80005a8:	f000 fa13 	bl	80009d2 <HAL_DMA_Init>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <HAL_UART_MspInit+0xb2>
    {
      Error_Handler();
 80005b2:	f7ff ff7d 	bl	80004b0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	4a0b      	ldr	r2, [pc, #44]	; (80005e8 <HAL_UART_MspInit+0xe4>)
 80005ba:	671a      	str	r2, [r3, #112]	; 0x70
 80005bc:	4a0a      	ldr	r2, [pc, #40]	; (80005e8 <HAL_UART_MspInit+0xe4>)
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80005c2:	2200      	movs	r2, #0
 80005c4:	2100      	movs	r1, #0
 80005c6:	2025      	movs	r0, #37	; 0x25
 80005c8:	f000 f9cd 	bl	8000966 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80005cc:	2025      	movs	r0, #37	; 0x25
 80005ce:	f000 f9e6 	bl	800099e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80005d2:	bf00      	nop
 80005d4:	3728      	adds	r7, #40	; 0x28
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40013800 	.word	0x40013800
 80005e0:	40021000 	.word	0x40021000
 80005e4:	48000800 	.word	0x48000800
 80005e8:	200000b8 	.word	0x200000b8
 80005ec:	40020058 	.word	0x40020058

080005f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005f4:	e7fe      	b.n	80005f4 <NMI_Handler+0x4>

080005f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005f6:	b480      	push	{r7}
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005fa:	e7fe      	b.n	80005fa <HardFault_Handler+0x4>

080005fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000600:	e7fe      	b.n	8000600 <MemManage_Handler+0x4>

08000602 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000602:	b480      	push	{r7}
 8000604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000606:	e7fe      	b.n	8000606 <BusFault_Handler+0x4>

08000608 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800060c:	e7fe      	b.n	800060c <UsageFault_Handler+0x4>

0800060e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800060e:	b480      	push	{r7}
 8000610:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000612:	bf00      	nop
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr

0800061c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000620:	bf00      	nop
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr

0800062a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800062a:	b480      	push	{r7}
 800062c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800062e:	bf00      	nop
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr

08000638 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800063c:	f000 f898 	bl	8000770 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000640:	bf00      	nop
 8000642:	bd80      	pop	{r7, pc}

08000644 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000648:	4802      	ldr	r0, [pc, #8]	; (8000654 <DMA1_Channel5_IRQHandler+0x10>)
 800064a:	f000 fadf 	bl	8000c0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	200000b8 	.word	0x200000b8

08000658 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800065c:	4802      	ldr	r0, [pc, #8]	; (8000668 <USART1_IRQHandler+0x10>)
 800065e:	f002 fac9 	bl	8002bf4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000662:	bf00      	nop
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20000034 	.word	0x20000034

0800066c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000670:	4b06      	ldr	r3, [pc, #24]	; (800068c <SystemInit+0x20>)
 8000672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000676:	4a05      	ldr	r2, [pc, #20]	; (800068c <SystemInit+0x20>)
 8000678:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800067c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000680:	bf00      	nop
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	e000ed00 	.word	0xe000ed00

08000690 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000690:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006c8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000694:	480d      	ldr	r0, [pc, #52]	; (80006cc <LoopForever+0x6>)
  ldr r1, =_edata
 8000696:	490e      	ldr	r1, [pc, #56]	; (80006d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000698:	4a0e      	ldr	r2, [pc, #56]	; (80006d4 <LoopForever+0xe>)
  movs r3, #0
 800069a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800069c:	e002      	b.n	80006a4 <LoopCopyDataInit>

0800069e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800069e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006a2:	3304      	adds	r3, #4

080006a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006a8:	d3f9      	bcc.n	800069e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006aa:	4a0b      	ldr	r2, [pc, #44]	; (80006d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006ac:	4c0b      	ldr	r4, [pc, #44]	; (80006dc <LoopForever+0x16>)
  movs r3, #0
 80006ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006b0:	e001      	b.n	80006b6 <LoopFillZerobss>

080006b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006b4:	3204      	adds	r2, #4

080006b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006b8:	d3fb      	bcc.n	80006b2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006ba:	f7ff ffd7 	bl	800066c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006be:	f003 fb85 	bl	8003dcc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006c2:	f7ff fd81 	bl	80001c8 <main>

080006c6 <LoopForever>:

LoopForever:
    b LoopForever
 80006c6:	e7fe      	b.n	80006c6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006c8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80006cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006d0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006d4:	08003e7c 	.word	0x08003e7c
  ldr r2, =_sbss
 80006d8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006dc:	20000100 	.word	0x20000100

080006e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006e0:	e7fe      	b.n	80006e0 <ADC1_2_IRQHandler>
	...

080006e4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006e8:	4b08      	ldr	r3, [pc, #32]	; (800070c <HAL_Init+0x28>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a07      	ldr	r2, [pc, #28]	; (800070c <HAL_Init+0x28>)
 80006ee:	f043 0310 	orr.w	r3, r3, #16
 80006f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006f4:	2003      	movs	r0, #3
 80006f6:	f000 f92b 	bl	8000950 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006fa:	2000      	movs	r0, #0
 80006fc:	f000 f808 	bl	8000710 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000700:	f7ff fedc 	bl	80004bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000704:	2300      	movs	r3, #0
}
 8000706:	4618      	mov	r0, r3
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40022000 	.word	0x40022000

08000710 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000718:	4b12      	ldr	r3, [pc, #72]	; (8000764 <HAL_InitTick+0x54>)
 800071a:	681a      	ldr	r2, [r3, #0]
 800071c:	4b12      	ldr	r3, [pc, #72]	; (8000768 <HAL_InitTick+0x58>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	4619      	mov	r1, r3
 8000722:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000726:	fbb3 f3f1 	udiv	r3, r3, r1
 800072a:	fbb2 f3f3 	udiv	r3, r2, r3
 800072e:	4618      	mov	r0, r3
 8000730:	f000 f943 	bl	80009ba <HAL_SYSTICK_Config>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800073a:	2301      	movs	r3, #1
 800073c:	e00e      	b.n	800075c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	2b0f      	cmp	r3, #15
 8000742:	d80a      	bhi.n	800075a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000744:	2200      	movs	r2, #0
 8000746:	6879      	ldr	r1, [r7, #4]
 8000748:	f04f 30ff 	mov.w	r0, #4294967295
 800074c:	f000 f90b 	bl	8000966 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000750:	4a06      	ldr	r2, [pc, #24]	; (800076c <HAL_InitTick+0x5c>)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000756:	2300      	movs	r3, #0
 8000758:	e000      	b.n	800075c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800075a:	2301      	movs	r3, #1
}
 800075c:	4618      	mov	r0, r3
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	20000000 	.word	0x20000000
 8000768:	20000008 	.word	0x20000008
 800076c:	20000004 	.word	0x20000004

08000770 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000774:	4b06      	ldr	r3, [pc, #24]	; (8000790 <HAL_IncTick+0x20>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	461a      	mov	r2, r3
 800077a:	4b06      	ldr	r3, [pc, #24]	; (8000794 <HAL_IncTick+0x24>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4413      	add	r3, r2
 8000780:	4a04      	ldr	r2, [pc, #16]	; (8000794 <HAL_IncTick+0x24>)
 8000782:	6013      	str	r3, [r2, #0]
}
 8000784:	bf00      	nop
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	20000008 	.word	0x20000008
 8000794:	200000fc 	.word	0x200000fc

08000798 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  return uwTick;  
 800079c:	4b03      	ldr	r3, [pc, #12]	; (80007ac <HAL_GetTick+0x14>)
 800079e:	681b      	ldr	r3, [r3, #0]
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	200000fc 	.word	0x200000fc

080007b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b085      	sub	sp, #20
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	f003 0307 	and.w	r3, r3, #7
 80007be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007c0:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <__NVIC_SetPriorityGrouping+0x44>)
 80007c2:	68db      	ldr	r3, [r3, #12]
 80007c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007c6:	68ba      	ldr	r2, [r7, #8]
 80007c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007cc:	4013      	ands	r3, r2
 80007ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007e2:	4a04      	ldr	r2, [pc, #16]	; (80007f4 <__NVIC_SetPriorityGrouping+0x44>)
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	60d3      	str	r3, [r2, #12]
}
 80007e8:	bf00      	nop
 80007ea:	3714      	adds	r7, #20
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr
 80007f4:	e000ed00 	.word	0xe000ed00

080007f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007fc:	4b04      	ldr	r3, [pc, #16]	; (8000810 <__NVIC_GetPriorityGrouping+0x18>)
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	0a1b      	lsrs	r3, r3, #8
 8000802:	f003 0307 	and.w	r3, r3, #7
}
 8000806:	4618      	mov	r0, r3
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr
 8000810:	e000ed00 	.word	0xe000ed00

08000814 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800081e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000822:	2b00      	cmp	r3, #0
 8000824:	db0b      	blt.n	800083e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	f003 021f 	and.w	r2, r3, #31
 800082c:	4907      	ldr	r1, [pc, #28]	; (800084c <__NVIC_EnableIRQ+0x38>)
 800082e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000832:	095b      	lsrs	r3, r3, #5
 8000834:	2001      	movs	r0, #1
 8000836:	fa00 f202 	lsl.w	r2, r0, r2
 800083a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800083e:	bf00      	nop
 8000840:	370c      	adds	r7, #12
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	e000e100 	.word	0xe000e100

08000850 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	6039      	str	r1, [r7, #0]
 800085a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800085c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000860:	2b00      	cmp	r3, #0
 8000862:	db0a      	blt.n	800087a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	b2da      	uxtb	r2, r3
 8000868:	490c      	ldr	r1, [pc, #48]	; (800089c <__NVIC_SetPriority+0x4c>)
 800086a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086e:	0112      	lsls	r2, r2, #4
 8000870:	b2d2      	uxtb	r2, r2
 8000872:	440b      	add	r3, r1
 8000874:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000878:	e00a      	b.n	8000890 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	b2da      	uxtb	r2, r3
 800087e:	4908      	ldr	r1, [pc, #32]	; (80008a0 <__NVIC_SetPriority+0x50>)
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	f003 030f 	and.w	r3, r3, #15
 8000886:	3b04      	subs	r3, #4
 8000888:	0112      	lsls	r2, r2, #4
 800088a:	b2d2      	uxtb	r2, r2
 800088c:	440b      	add	r3, r1
 800088e:	761a      	strb	r2, [r3, #24]
}
 8000890:	bf00      	nop
 8000892:	370c      	adds	r7, #12
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr
 800089c:	e000e100 	.word	0xe000e100
 80008a0:	e000ed00 	.word	0xe000ed00

080008a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b089      	sub	sp, #36	; 0x24
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	60f8      	str	r0, [r7, #12]
 80008ac:	60b9      	str	r1, [r7, #8]
 80008ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	f003 0307 	and.w	r3, r3, #7
 80008b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008b8:	69fb      	ldr	r3, [r7, #28]
 80008ba:	f1c3 0307 	rsb	r3, r3, #7
 80008be:	2b04      	cmp	r3, #4
 80008c0:	bf28      	it	cs
 80008c2:	2304      	movcs	r3, #4
 80008c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008c6:	69fb      	ldr	r3, [r7, #28]
 80008c8:	3304      	adds	r3, #4
 80008ca:	2b06      	cmp	r3, #6
 80008cc:	d902      	bls.n	80008d4 <NVIC_EncodePriority+0x30>
 80008ce:	69fb      	ldr	r3, [r7, #28]
 80008d0:	3b03      	subs	r3, #3
 80008d2:	e000      	b.n	80008d6 <NVIC_EncodePriority+0x32>
 80008d4:	2300      	movs	r3, #0
 80008d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008d8:	f04f 32ff 	mov.w	r2, #4294967295
 80008dc:	69bb      	ldr	r3, [r7, #24]
 80008de:	fa02 f303 	lsl.w	r3, r2, r3
 80008e2:	43da      	mvns	r2, r3
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	401a      	ands	r2, r3
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008ec:	f04f 31ff 	mov.w	r1, #4294967295
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	fa01 f303 	lsl.w	r3, r1, r3
 80008f6:	43d9      	mvns	r1, r3
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008fc:	4313      	orrs	r3, r2
         );
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3724      	adds	r7, #36	; 0x24
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
	...

0800090c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	3b01      	subs	r3, #1
 8000918:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800091c:	d301      	bcc.n	8000922 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800091e:	2301      	movs	r3, #1
 8000920:	e00f      	b.n	8000942 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000922:	4a0a      	ldr	r2, [pc, #40]	; (800094c <SysTick_Config+0x40>)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	3b01      	subs	r3, #1
 8000928:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800092a:	210f      	movs	r1, #15
 800092c:	f04f 30ff 	mov.w	r0, #4294967295
 8000930:	f7ff ff8e 	bl	8000850 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000934:	4b05      	ldr	r3, [pc, #20]	; (800094c <SysTick_Config+0x40>)
 8000936:	2200      	movs	r2, #0
 8000938:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800093a:	4b04      	ldr	r3, [pc, #16]	; (800094c <SysTick_Config+0x40>)
 800093c:	2207      	movs	r2, #7
 800093e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000940:	2300      	movs	r3, #0
}
 8000942:	4618      	mov	r0, r3
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	e000e010 	.word	0xe000e010

08000950 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000958:	6878      	ldr	r0, [r7, #4]
 800095a:	f7ff ff29 	bl	80007b0 <__NVIC_SetPriorityGrouping>
}
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}

08000966 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000966:	b580      	push	{r7, lr}
 8000968:	b086      	sub	sp, #24
 800096a:	af00      	add	r7, sp, #0
 800096c:	4603      	mov	r3, r0
 800096e:	60b9      	str	r1, [r7, #8]
 8000970:	607a      	str	r2, [r7, #4]
 8000972:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000974:	2300      	movs	r3, #0
 8000976:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000978:	f7ff ff3e 	bl	80007f8 <__NVIC_GetPriorityGrouping>
 800097c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800097e:	687a      	ldr	r2, [r7, #4]
 8000980:	68b9      	ldr	r1, [r7, #8]
 8000982:	6978      	ldr	r0, [r7, #20]
 8000984:	f7ff ff8e 	bl	80008a4 <NVIC_EncodePriority>
 8000988:	4602      	mov	r2, r0
 800098a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800098e:	4611      	mov	r1, r2
 8000990:	4618      	mov	r0, r3
 8000992:	f7ff ff5d 	bl	8000850 <__NVIC_SetPriority>
}
 8000996:	bf00      	nop
 8000998:	3718      	adds	r7, #24
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}

0800099e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800099e:	b580      	push	{r7, lr}
 80009a0:	b082      	sub	sp, #8
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	4603      	mov	r3, r0
 80009a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff ff31 	bl	8000814 <__NVIC_EnableIRQ>
}
 80009b2:	bf00      	nop
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009ba:	b580      	push	{r7, lr}
 80009bc:	b082      	sub	sp, #8
 80009be:	af00      	add	r7, sp, #0
 80009c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009c2:	6878      	ldr	r0, [r7, #4]
 80009c4:	f7ff ffa2 	bl	800090c <SysTick_Config>
 80009c8:	4603      	mov	r3, r0
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}

080009d2 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80009d2:	b580      	push	{r7, lr}
 80009d4:	b084      	sub	sp, #16
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80009da:	2300      	movs	r3, #0
 80009dc:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d101      	bne.n	80009e8 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80009e4:	2301      	movs	r3, #1
 80009e6:	e037      	b.n	8000a58 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2202      	movs	r2, #2
 80009ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80009fe:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000a02:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000a0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	68db      	ldr	r3, [r3, #12]
 8000a12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	695b      	ldr	r3, [r3, #20]
 8000a1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	69db      	ldr	r3, [r3, #28]
 8000a2a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000a2c:	68fa      	ldr	r2, [r7, #12]
 8000a2e:	4313      	orrs	r3, r2
 8000a30:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	68fa      	ldr	r2, [r7, #12]
 8000a38:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000a3a:	6878      	ldr	r0, [r7, #4]
 8000a3c:	f000 f9b8 	bl	8000db0 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	2200      	movs	r2, #0
 8000a44:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	2201      	movs	r2, #1
 8000a4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2200      	movs	r2, #0
 8000a52:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000a56:	2300      	movs	r3, #0
}  
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3710      	adds	r7, #16
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b086      	sub	sp, #24
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	60f8      	str	r0, [r7, #12]
 8000a68:	60b9      	str	r1, [r7, #8]
 8000a6a:	607a      	str	r2, [r7, #4]
 8000a6c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d101      	bne.n	8000a80 <HAL_DMA_Start_IT+0x20>
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	e04a      	b.n	8000b16 <HAL_DMA_Start_IT+0xb6>
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	2201      	movs	r2, #1
 8000a84:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d13a      	bne.n	8000b08 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	2202      	movs	r2, #2
 8000a96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f022 0201 	bic.w	r2, r2, #1
 8000aae:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	68b9      	ldr	r1, [r7, #8]
 8000ab6:	68f8      	ldr	r0, [r7, #12]
 8000ab8:	f000 f94b 	bl	8000d52 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d008      	beq.n	8000ad6 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f042 020e 	orr.w	r2, r2, #14
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	e00f      	b.n	8000af6 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f042 020a 	orr.w	r2, r2, #10
 8000ae4:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f022 0204 	bic.w	r2, r2, #4
 8000af4:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f042 0201 	orr.w	r2, r2, #1
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	e005      	b.n	8000b14 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8000b10:	2302      	movs	r3, #2
 8000b12:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8000b14:	7dfb      	ldrb	r3, [r7, #23]
} 
 8000b16:	4618      	mov	r0, r3
 8000b18:	3718      	adds	r7, #24
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	b083      	sub	sp, #12
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b2c:	2b02      	cmp	r3, #2
 8000b2e:	d008      	beq.n	8000b42 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2204      	movs	r2, #4
 8000b34:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	2200      	movs	r2, #0
 8000b3a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e020      	b.n	8000b84 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f022 020e 	bic.w	r2, r2, #14
 8000b50:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f022 0201 	bic.w	r2, r2, #1
 8000b60:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b6a:	2101      	movs	r1, #1
 8000b6c:	fa01 f202 	lsl.w	r2, r1, r2
 8000b70:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2201      	movs	r2, #1
 8000b76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000b82:	2300      	movs	r3, #0
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ba2:	2b02      	cmp	r3, #2
 8000ba4:	d005      	beq.n	8000bb2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	2204      	movs	r2, #4
 8000baa:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000bac:	2301      	movs	r3, #1
 8000bae:	73fb      	strb	r3, [r7, #15]
 8000bb0:	e027      	b.n	8000c02 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f022 020e 	bic.w	r2, r2, #14
 8000bc0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f022 0201 	bic.w	r2, r2, #1
 8000bd0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bda:	2101      	movs	r1, #1
 8000bdc:	fa01 f202 	lsl.w	r2, r1, r2
 8000be0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2201      	movs	r2, #1
 8000be6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2200      	movs	r2, #0
 8000bee:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d003      	beq.n	8000c02 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bfe:	6878      	ldr	r0, [r7, #4]
 8000c00:	4798      	blx	r3
    } 
  }
  return status;
 8000c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3710      	adds	r7, #16
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c28:	2204      	movs	r2, #4
 8000c2a:	409a      	lsls	r2, r3
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	4013      	ands	r3, r2
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d024      	beq.n	8000c7e <HAL_DMA_IRQHandler+0x72>
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	f003 0304 	and.w	r3, r3, #4
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d01f      	beq.n	8000c7e <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f003 0320 	and.w	r3, r3, #32
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d107      	bne.n	8000c5c <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f022 0204 	bic.w	r2, r2, #4
 8000c5a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c64:	2104      	movs	r1, #4
 8000c66:	fa01 f202 	lsl.w	r2, r1, r2
 8000c6a:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d06a      	beq.n	8000d4a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8000c7c:	e065      	b.n	8000d4a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c82:	2202      	movs	r2, #2
 8000c84:	409a      	lsls	r2, r3
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	4013      	ands	r3, r2
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d02c      	beq.n	8000ce8 <HAL_DMA_IRQHandler+0xdc>
 8000c8e:	68bb      	ldr	r3, [r7, #8]
 8000c90:	f003 0302 	and.w	r3, r3, #2
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d027      	beq.n	8000ce8 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f003 0320 	and.w	r3, r3, #32
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d10b      	bne.n	8000cbe <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f022 020a 	bic.w	r2, r2, #10
 8000cb4:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2201      	movs	r2, #1
 8000cba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cc6:	2102      	movs	r1, #2
 8000cc8:	fa01 f202 	lsl.w	r2, r1, r2
 8000ccc:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d035      	beq.n	8000d4a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8000ce6:	e030      	b.n	8000d4a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cec:	2208      	movs	r2, #8
 8000cee:	409a      	lsls	r2, r3
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d028      	beq.n	8000d4a <HAL_DMA_IRQHandler+0x13e>
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	f003 0308 	and.w	r3, r3, #8
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d023      	beq.n	8000d4a <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f022 020e 	bic.w	r2, r2, #14
 8000d10:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d1a:	2101      	movs	r1, #1
 8000d1c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d20:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2201      	movs	r2, #1
 8000d26:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2200      	movs	r2, #0
 8000d34:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d004      	beq.n	8000d4a <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	4798      	blx	r3
    }
  }
}  
 8000d48:	e7ff      	b.n	8000d4a <HAL_DMA_IRQHandler+0x13e>
 8000d4a:	bf00      	nop
 8000d4c:	3710      	adds	r7, #16
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d52:	b480      	push	{r7}
 8000d54:	b085      	sub	sp, #20
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	60f8      	str	r0, [r7, #12]
 8000d5a:	60b9      	str	r1, [r7, #8]
 8000d5c:	607a      	str	r2, [r7, #4]
 8000d5e:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d6e:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	683a      	ldr	r2, [r7, #0]
 8000d76:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	2b10      	cmp	r3, #16
 8000d7e:	d108      	bne.n	8000d92 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	687a      	ldr	r2, [r7, #4]
 8000d86:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	68ba      	ldr	r2, [r7, #8]
 8000d8e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000d90:	e007      	b.n	8000da2 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	68ba      	ldr	r2, [r7, #8]
 8000d98:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	687a      	ldr	r2, [r7, #4]
 8000da0:	60da      	str	r2, [r3, #12]
}
 8000da2:	bf00      	nop
 8000da4:	3714      	adds	r7, #20
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
	...

08000db0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	4b14      	ldr	r3, [pc, #80]	; (8000e10 <DMA_CalcBaseAndBitshift+0x60>)
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	d80f      	bhi.n	8000de4 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	461a      	mov	r2, r3
 8000dca:	4b12      	ldr	r3, [pc, #72]	; (8000e14 <DMA_CalcBaseAndBitshift+0x64>)
 8000dcc:	4413      	add	r3, r2
 8000dce:	4a12      	ldr	r2, [pc, #72]	; (8000e18 <DMA_CalcBaseAndBitshift+0x68>)
 8000dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8000dd4:	091b      	lsrs	r3, r3, #4
 8000dd6:	009a      	lsls	r2, r3, #2
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	4a0f      	ldr	r2, [pc, #60]	; (8000e1c <DMA_CalcBaseAndBitshift+0x6c>)
 8000de0:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8000de2:	e00e      	b.n	8000e02 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	461a      	mov	r2, r3
 8000dea:	4b0d      	ldr	r3, [pc, #52]	; (8000e20 <DMA_CalcBaseAndBitshift+0x70>)
 8000dec:	4413      	add	r3, r2
 8000dee:	4a0a      	ldr	r2, [pc, #40]	; (8000e18 <DMA_CalcBaseAndBitshift+0x68>)
 8000df0:	fba2 2303 	umull	r2, r3, r2, r3
 8000df4:	091b      	lsrs	r3, r3, #4
 8000df6:	009a      	lsls	r2, r3, #2
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	4a09      	ldr	r2, [pc, #36]	; (8000e24 <DMA_CalcBaseAndBitshift+0x74>)
 8000e00:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000e02:	bf00      	nop
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	40020407 	.word	0x40020407
 8000e14:	bffdfff8 	.word	0xbffdfff8
 8000e18:	cccccccd 	.word	0xcccccccd
 8000e1c:	40020000 	.word	0x40020000
 8000e20:	bffdfbf8 	.word	0xbffdfbf8
 8000e24:	40020400 	.word	0x40020400

08000e28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b087      	sub	sp, #28
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e32:	2300      	movs	r3, #0
 8000e34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e36:	e154      	b.n	80010e2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	fa01 f303 	lsl.w	r3, r1, r3
 8000e44:	4013      	ands	r3, r2
 8000e46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	f000 8146 	beq.w	80010dc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f003 0303 	and.w	r3, r3, #3
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d005      	beq.n	8000e68 <HAL_GPIO_Init+0x40>
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f003 0303 	and.w	r3, r3, #3
 8000e64:	2b02      	cmp	r3, #2
 8000e66:	d130      	bne.n	8000eca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	689b      	ldr	r3, [r3, #8]
 8000e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	2203      	movs	r2, #3
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	68da      	ldr	r2, [r3, #12]
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	693a      	ldr	r2, [r7, #16]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	43db      	mvns	r3, r3
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	091b      	lsrs	r3, r3, #4
 8000eb4:	f003 0201 	and.w	r2, r3, #1
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f003 0303 	and.w	r3, r3, #3
 8000ed2:	2b03      	cmp	r3, #3
 8000ed4:	d017      	beq.n	8000f06 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	68db      	ldr	r3, [r3, #12]
 8000eda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	2203      	movs	r2, #3
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	4013      	ands	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	689a      	ldr	r2, [r3, #8]
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f003 0303 	and.w	r3, r3, #3
 8000f0e:	2b02      	cmp	r3, #2
 8000f10:	d123      	bne.n	8000f5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	08da      	lsrs	r2, r3, #3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	3208      	adds	r2, #8
 8000f1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	f003 0307 	and.w	r3, r3, #7
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	220f      	movs	r2, #15
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	43db      	mvns	r3, r3
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	4013      	ands	r3, r2
 8000f34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	691a      	ldr	r2, [r3, #16]
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	f003 0307 	and.w	r3, r3, #7
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	08da      	lsrs	r2, r3, #3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	3208      	adds	r2, #8
 8000f54:	6939      	ldr	r1, [r7, #16]
 8000f56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	2203      	movs	r2, #3
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f003 0203 	and.w	r2, r3, #3
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	f000 80a0 	beq.w	80010dc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f9c:	4b58      	ldr	r3, [pc, #352]	; (8001100 <HAL_GPIO_Init+0x2d8>)
 8000f9e:	699b      	ldr	r3, [r3, #24]
 8000fa0:	4a57      	ldr	r2, [pc, #348]	; (8001100 <HAL_GPIO_Init+0x2d8>)
 8000fa2:	f043 0301 	orr.w	r3, r3, #1
 8000fa6:	6193      	str	r3, [r2, #24]
 8000fa8:	4b55      	ldr	r3, [pc, #340]	; (8001100 <HAL_GPIO_Init+0x2d8>)
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	f003 0301 	and.w	r3, r3, #1
 8000fb0:	60bb      	str	r3, [r7, #8]
 8000fb2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fb4:	4a53      	ldr	r2, [pc, #332]	; (8001104 <HAL_GPIO_Init+0x2dc>)
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	089b      	lsrs	r3, r3, #2
 8000fba:	3302      	adds	r3, #2
 8000fbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	f003 0303 	and.w	r3, r3, #3
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	220f      	movs	r2, #15
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fde:	d019      	beq.n	8001014 <HAL_GPIO_Init+0x1ec>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	4a49      	ldr	r2, [pc, #292]	; (8001108 <HAL_GPIO_Init+0x2e0>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d013      	beq.n	8001010 <HAL_GPIO_Init+0x1e8>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	4a48      	ldr	r2, [pc, #288]	; (800110c <HAL_GPIO_Init+0x2e4>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d00d      	beq.n	800100c <HAL_GPIO_Init+0x1e4>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	4a47      	ldr	r2, [pc, #284]	; (8001110 <HAL_GPIO_Init+0x2e8>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d007      	beq.n	8001008 <HAL_GPIO_Init+0x1e0>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4a46      	ldr	r2, [pc, #280]	; (8001114 <HAL_GPIO_Init+0x2ec>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d101      	bne.n	8001004 <HAL_GPIO_Init+0x1dc>
 8001000:	2304      	movs	r3, #4
 8001002:	e008      	b.n	8001016 <HAL_GPIO_Init+0x1ee>
 8001004:	2305      	movs	r3, #5
 8001006:	e006      	b.n	8001016 <HAL_GPIO_Init+0x1ee>
 8001008:	2303      	movs	r3, #3
 800100a:	e004      	b.n	8001016 <HAL_GPIO_Init+0x1ee>
 800100c:	2302      	movs	r3, #2
 800100e:	e002      	b.n	8001016 <HAL_GPIO_Init+0x1ee>
 8001010:	2301      	movs	r3, #1
 8001012:	e000      	b.n	8001016 <HAL_GPIO_Init+0x1ee>
 8001014:	2300      	movs	r3, #0
 8001016:	697a      	ldr	r2, [r7, #20]
 8001018:	f002 0203 	and.w	r2, r2, #3
 800101c:	0092      	lsls	r2, r2, #2
 800101e:	4093      	lsls	r3, r2
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	4313      	orrs	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001026:	4937      	ldr	r1, [pc, #220]	; (8001104 <HAL_GPIO_Init+0x2dc>)
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	089b      	lsrs	r3, r3, #2
 800102c:	3302      	adds	r3, #2
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001034:	4b38      	ldr	r3, [pc, #224]	; (8001118 <HAL_GPIO_Init+0x2f0>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	43db      	mvns	r3, r3
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	4013      	ands	r3, r2
 8001042:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800104c:	2b00      	cmp	r3, #0
 800104e:	d003      	beq.n	8001058 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	4313      	orrs	r3, r2
 8001056:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001058:	4a2f      	ldr	r2, [pc, #188]	; (8001118 <HAL_GPIO_Init+0x2f0>)
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800105e:	4b2e      	ldr	r3, [pc, #184]	; (8001118 <HAL_GPIO_Init+0x2f0>)
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	43db      	mvns	r3, r3
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	4013      	ands	r3, r2
 800106c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d003      	beq.n	8001082 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	4313      	orrs	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001082:	4a25      	ldr	r2, [pc, #148]	; (8001118 <HAL_GPIO_Init+0x2f0>)
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001088:	4b23      	ldr	r3, [pc, #140]	; (8001118 <HAL_GPIO_Init+0x2f0>)
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	43db      	mvns	r3, r3
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	4013      	ands	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d003      	beq.n	80010ac <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80010ac:	4a1a      	ldr	r2, [pc, #104]	; (8001118 <HAL_GPIO_Init+0x2f0>)
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010b2:	4b19      	ldr	r3, [pc, #100]	; (8001118 <HAL_GPIO_Init+0x2f0>)
 80010b4:	68db      	ldr	r3, [r3, #12]
 80010b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	43db      	mvns	r3, r3
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	4013      	ands	r3, r2
 80010c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80010d6:	4a10      	ldr	r2, [pc, #64]	; (8001118 <HAL_GPIO_Init+0x2f0>)
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	3301      	adds	r3, #1
 80010e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	fa22 f303 	lsr.w	r3, r2, r3
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	f47f aea3 	bne.w	8000e38 <HAL_GPIO_Init+0x10>
  }
}
 80010f2:	bf00      	nop
 80010f4:	bf00      	nop
 80010f6:	371c      	adds	r7, #28
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	40021000 	.word	0x40021000
 8001104:	40010000 	.word	0x40010000
 8001108:	48000400 	.word	0x48000400
 800110c:	48000800 	.word	0x48000800
 8001110:	48000c00 	.word	0x48000c00
 8001114:	48001000 	.word	0x48001000
 8001118:	40010400 	.word	0x40010400

0800111c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	460b      	mov	r3, r1
 8001126:	807b      	strh	r3, [r7, #2]
 8001128:	4613      	mov	r3, r2
 800112a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800112c:	787b      	ldrb	r3, [r7, #1]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d003      	beq.n	800113a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001132:	887a      	ldrh	r2, [r7, #2]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001138:	e002      	b.n	8001140 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800113a:	887a      	ldrh	r2, [r7, #2]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001140:	bf00      	nop
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001152:	af00      	add	r7, sp, #0
 8001154:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001158:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800115c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800115e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001162:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d102      	bne.n	8001172 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	f001 b823 	b.w	80021b8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001172:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001176:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	2b00      	cmp	r3, #0
 8001184:	f000 817d 	beq.w	8001482 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001188:	4bbc      	ldr	r3, [pc, #752]	; (800147c <HAL_RCC_OscConfig+0x330>)
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f003 030c 	and.w	r3, r3, #12
 8001190:	2b04      	cmp	r3, #4
 8001192:	d00c      	beq.n	80011ae <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001194:	4bb9      	ldr	r3, [pc, #740]	; (800147c <HAL_RCC_OscConfig+0x330>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f003 030c 	and.w	r3, r3, #12
 800119c:	2b08      	cmp	r3, #8
 800119e:	d15c      	bne.n	800125a <HAL_RCC_OscConfig+0x10e>
 80011a0:	4bb6      	ldr	r3, [pc, #728]	; (800147c <HAL_RCC_OscConfig+0x330>)
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011ac:	d155      	bne.n	800125a <HAL_RCC_OscConfig+0x10e>
 80011ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011b2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80011ba:	fa93 f3a3 	rbit	r3, r3
 80011be:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80011c2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011c6:	fab3 f383 	clz	r3, r3
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	095b      	lsrs	r3, r3, #5
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d102      	bne.n	80011e0 <HAL_RCC_OscConfig+0x94>
 80011da:	4ba8      	ldr	r3, [pc, #672]	; (800147c <HAL_RCC_OscConfig+0x330>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	e015      	b.n	800120c <HAL_RCC_OscConfig+0xc0>
 80011e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011e4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011e8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80011ec:	fa93 f3a3 	rbit	r3, r3
 80011f0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80011f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011f8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80011fc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001200:	fa93 f3a3 	rbit	r3, r3
 8001204:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001208:	4b9c      	ldr	r3, [pc, #624]	; (800147c <HAL_RCC_OscConfig+0x330>)
 800120a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001210:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001214:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001218:	fa92 f2a2 	rbit	r2, r2
 800121c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001220:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001224:	fab2 f282 	clz	r2, r2
 8001228:	b2d2      	uxtb	r2, r2
 800122a:	f042 0220 	orr.w	r2, r2, #32
 800122e:	b2d2      	uxtb	r2, r2
 8001230:	f002 021f 	and.w	r2, r2, #31
 8001234:	2101      	movs	r1, #1
 8001236:	fa01 f202 	lsl.w	r2, r1, r2
 800123a:	4013      	ands	r3, r2
 800123c:	2b00      	cmp	r3, #0
 800123e:	f000 811f 	beq.w	8001480 <HAL_RCC_OscConfig+0x334>
 8001242:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001246:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	2b00      	cmp	r3, #0
 8001250:	f040 8116 	bne.w	8001480 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	f000 bfaf 	b.w	80021b8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800125a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800125e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800126a:	d106      	bne.n	800127a <HAL_RCC_OscConfig+0x12e>
 800126c:	4b83      	ldr	r3, [pc, #524]	; (800147c <HAL_RCC_OscConfig+0x330>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a82      	ldr	r2, [pc, #520]	; (800147c <HAL_RCC_OscConfig+0x330>)
 8001272:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001276:	6013      	str	r3, [r2, #0]
 8001278:	e036      	b.n	80012e8 <HAL_RCC_OscConfig+0x19c>
 800127a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800127e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d10c      	bne.n	80012a4 <HAL_RCC_OscConfig+0x158>
 800128a:	4b7c      	ldr	r3, [pc, #496]	; (800147c <HAL_RCC_OscConfig+0x330>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a7b      	ldr	r2, [pc, #492]	; (800147c <HAL_RCC_OscConfig+0x330>)
 8001290:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001294:	6013      	str	r3, [r2, #0]
 8001296:	4b79      	ldr	r3, [pc, #484]	; (800147c <HAL_RCC_OscConfig+0x330>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a78      	ldr	r2, [pc, #480]	; (800147c <HAL_RCC_OscConfig+0x330>)
 800129c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012a0:	6013      	str	r3, [r2, #0]
 80012a2:	e021      	b.n	80012e8 <HAL_RCC_OscConfig+0x19c>
 80012a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012b4:	d10c      	bne.n	80012d0 <HAL_RCC_OscConfig+0x184>
 80012b6:	4b71      	ldr	r3, [pc, #452]	; (800147c <HAL_RCC_OscConfig+0x330>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a70      	ldr	r2, [pc, #448]	; (800147c <HAL_RCC_OscConfig+0x330>)
 80012bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012c0:	6013      	str	r3, [r2, #0]
 80012c2:	4b6e      	ldr	r3, [pc, #440]	; (800147c <HAL_RCC_OscConfig+0x330>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a6d      	ldr	r2, [pc, #436]	; (800147c <HAL_RCC_OscConfig+0x330>)
 80012c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012cc:	6013      	str	r3, [r2, #0]
 80012ce:	e00b      	b.n	80012e8 <HAL_RCC_OscConfig+0x19c>
 80012d0:	4b6a      	ldr	r3, [pc, #424]	; (800147c <HAL_RCC_OscConfig+0x330>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a69      	ldr	r2, [pc, #420]	; (800147c <HAL_RCC_OscConfig+0x330>)
 80012d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012da:	6013      	str	r3, [r2, #0]
 80012dc:	4b67      	ldr	r3, [pc, #412]	; (800147c <HAL_RCC_OscConfig+0x330>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a66      	ldr	r2, [pc, #408]	; (800147c <HAL_RCC_OscConfig+0x330>)
 80012e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012e6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012e8:	4b64      	ldr	r3, [pc, #400]	; (800147c <HAL_RCC_OscConfig+0x330>)
 80012ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ec:	f023 020f 	bic.w	r2, r3, #15
 80012f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	495f      	ldr	r1, [pc, #380]	; (800147c <HAL_RCC_OscConfig+0x330>)
 80012fe:	4313      	orrs	r3, r2
 8001300:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001302:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001306:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d059      	beq.n	80013c6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001312:	f7ff fa41 	bl	8000798 <HAL_GetTick>
 8001316:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800131a:	e00a      	b.n	8001332 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800131c:	f7ff fa3c 	bl	8000798 <HAL_GetTick>
 8001320:	4602      	mov	r2, r0
 8001322:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	2b64      	cmp	r3, #100	; 0x64
 800132a:	d902      	bls.n	8001332 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	f000 bf43 	b.w	80021b8 <HAL_RCC_OscConfig+0x106c>
 8001332:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001336:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800133a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800133e:	fa93 f3a3 	rbit	r3, r3
 8001342:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001346:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800134a:	fab3 f383 	clz	r3, r3
 800134e:	b2db      	uxtb	r3, r3
 8001350:	095b      	lsrs	r3, r3, #5
 8001352:	b2db      	uxtb	r3, r3
 8001354:	f043 0301 	orr.w	r3, r3, #1
 8001358:	b2db      	uxtb	r3, r3
 800135a:	2b01      	cmp	r3, #1
 800135c:	d102      	bne.n	8001364 <HAL_RCC_OscConfig+0x218>
 800135e:	4b47      	ldr	r3, [pc, #284]	; (800147c <HAL_RCC_OscConfig+0x330>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	e015      	b.n	8001390 <HAL_RCC_OscConfig+0x244>
 8001364:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001368:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800136c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001370:	fa93 f3a3 	rbit	r3, r3
 8001374:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001378:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800137c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001380:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001384:	fa93 f3a3 	rbit	r3, r3
 8001388:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800138c:	4b3b      	ldr	r3, [pc, #236]	; (800147c <HAL_RCC_OscConfig+0x330>)
 800138e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001390:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001394:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001398:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800139c:	fa92 f2a2 	rbit	r2, r2
 80013a0:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80013a4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80013a8:	fab2 f282 	clz	r2, r2
 80013ac:	b2d2      	uxtb	r2, r2
 80013ae:	f042 0220 	orr.w	r2, r2, #32
 80013b2:	b2d2      	uxtb	r2, r2
 80013b4:	f002 021f 	and.w	r2, r2, #31
 80013b8:	2101      	movs	r1, #1
 80013ba:	fa01 f202 	lsl.w	r2, r1, r2
 80013be:	4013      	ands	r3, r2
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d0ab      	beq.n	800131c <HAL_RCC_OscConfig+0x1d0>
 80013c4:	e05d      	b.n	8001482 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c6:	f7ff f9e7 	bl	8000798 <HAL_GetTick>
 80013ca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ce:	e00a      	b.n	80013e6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013d0:	f7ff f9e2 	bl	8000798 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	2b64      	cmp	r3, #100	; 0x64
 80013de:	d902      	bls.n	80013e6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80013e0:	2303      	movs	r3, #3
 80013e2:	f000 bee9 	b.w	80021b8 <HAL_RCC_OscConfig+0x106c>
 80013e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013ea:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ee:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80013f2:	fa93 f3a3 	rbit	r3, r3
 80013f6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80013fa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013fe:	fab3 f383 	clz	r3, r3
 8001402:	b2db      	uxtb	r3, r3
 8001404:	095b      	lsrs	r3, r3, #5
 8001406:	b2db      	uxtb	r3, r3
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	b2db      	uxtb	r3, r3
 800140e:	2b01      	cmp	r3, #1
 8001410:	d102      	bne.n	8001418 <HAL_RCC_OscConfig+0x2cc>
 8001412:	4b1a      	ldr	r3, [pc, #104]	; (800147c <HAL_RCC_OscConfig+0x330>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	e015      	b.n	8001444 <HAL_RCC_OscConfig+0x2f8>
 8001418:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800141c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001420:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001424:	fa93 f3a3 	rbit	r3, r3
 8001428:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800142c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001430:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001434:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001438:	fa93 f3a3 	rbit	r3, r3
 800143c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001440:	4b0e      	ldr	r3, [pc, #56]	; (800147c <HAL_RCC_OscConfig+0x330>)
 8001442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001444:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001448:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800144c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001450:	fa92 f2a2 	rbit	r2, r2
 8001454:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001458:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800145c:	fab2 f282 	clz	r2, r2
 8001460:	b2d2      	uxtb	r2, r2
 8001462:	f042 0220 	orr.w	r2, r2, #32
 8001466:	b2d2      	uxtb	r2, r2
 8001468:	f002 021f 	and.w	r2, r2, #31
 800146c:	2101      	movs	r1, #1
 800146e:	fa01 f202 	lsl.w	r2, r1, r2
 8001472:	4013      	ands	r3, r2
 8001474:	2b00      	cmp	r3, #0
 8001476:	d1ab      	bne.n	80013d0 <HAL_RCC_OscConfig+0x284>
 8001478:	e003      	b.n	8001482 <HAL_RCC_OscConfig+0x336>
 800147a:	bf00      	nop
 800147c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001480:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001482:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001486:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	2b00      	cmp	r3, #0
 8001494:	f000 817d 	beq.w	8001792 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001498:	4ba6      	ldr	r3, [pc, #664]	; (8001734 <HAL_RCC_OscConfig+0x5e8>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f003 030c 	and.w	r3, r3, #12
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d00b      	beq.n	80014bc <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80014a4:	4ba3      	ldr	r3, [pc, #652]	; (8001734 <HAL_RCC_OscConfig+0x5e8>)
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f003 030c 	and.w	r3, r3, #12
 80014ac:	2b08      	cmp	r3, #8
 80014ae:	d172      	bne.n	8001596 <HAL_RCC_OscConfig+0x44a>
 80014b0:	4ba0      	ldr	r3, [pc, #640]	; (8001734 <HAL_RCC_OscConfig+0x5e8>)
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d16c      	bne.n	8001596 <HAL_RCC_OscConfig+0x44a>
 80014bc:	2302      	movs	r3, #2
 80014be:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014c2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80014c6:	fa93 f3a3 	rbit	r3, r3
 80014ca:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80014ce:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014d2:	fab3 f383 	clz	r3, r3
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	095b      	lsrs	r3, r3, #5
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	f043 0301 	orr.w	r3, r3, #1
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d102      	bne.n	80014ec <HAL_RCC_OscConfig+0x3a0>
 80014e6:	4b93      	ldr	r3, [pc, #588]	; (8001734 <HAL_RCC_OscConfig+0x5e8>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	e013      	b.n	8001514 <HAL_RCC_OscConfig+0x3c8>
 80014ec:	2302      	movs	r3, #2
 80014ee:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014f2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80014f6:	fa93 f3a3 	rbit	r3, r3
 80014fa:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80014fe:	2302      	movs	r3, #2
 8001500:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001504:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001508:	fa93 f3a3 	rbit	r3, r3
 800150c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001510:	4b88      	ldr	r3, [pc, #544]	; (8001734 <HAL_RCC_OscConfig+0x5e8>)
 8001512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001514:	2202      	movs	r2, #2
 8001516:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800151a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800151e:	fa92 f2a2 	rbit	r2, r2
 8001522:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001526:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800152a:	fab2 f282 	clz	r2, r2
 800152e:	b2d2      	uxtb	r2, r2
 8001530:	f042 0220 	orr.w	r2, r2, #32
 8001534:	b2d2      	uxtb	r2, r2
 8001536:	f002 021f 	and.w	r2, r2, #31
 800153a:	2101      	movs	r1, #1
 800153c:	fa01 f202 	lsl.w	r2, r1, r2
 8001540:	4013      	ands	r3, r2
 8001542:	2b00      	cmp	r3, #0
 8001544:	d00a      	beq.n	800155c <HAL_RCC_OscConfig+0x410>
 8001546:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800154a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	691b      	ldr	r3, [r3, #16]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d002      	beq.n	800155c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	f000 be2e 	b.w	80021b8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800155c:	4b75      	ldr	r3, [pc, #468]	; (8001734 <HAL_RCC_OscConfig+0x5e8>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001564:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001568:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	695b      	ldr	r3, [r3, #20]
 8001570:	21f8      	movs	r1, #248	; 0xf8
 8001572:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001576:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800157a:	fa91 f1a1 	rbit	r1, r1
 800157e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001582:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001586:	fab1 f181 	clz	r1, r1
 800158a:	b2c9      	uxtb	r1, r1
 800158c:	408b      	lsls	r3, r1
 800158e:	4969      	ldr	r1, [pc, #420]	; (8001734 <HAL_RCC_OscConfig+0x5e8>)
 8001590:	4313      	orrs	r3, r2
 8001592:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001594:	e0fd      	b.n	8001792 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001596:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800159a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	691b      	ldr	r3, [r3, #16]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f000 8088 	beq.w	80016b8 <HAL_RCC_OscConfig+0x56c>
 80015a8:	2301      	movs	r3, #1
 80015aa:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ae:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80015b2:	fa93 f3a3 	rbit	r3, r3
 80015b6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80015ba:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015be:	fab3 f383 	clz	r3, r3
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80015c8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	461a      	mov	r2, r3
 80015d0:	2301      	movs	r3, #1
 80015d2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d4:	f7ff f8e0 	bl	8000798 <HAL_GetTick>
 80015d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015dc:	e00a      	b.n	80015f4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015de:	f7ff f8db 	bl	8000798 <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d902      	bls.n	80015f4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	f000 bde2 	b.w	80021b8 <HAL_RCC_OscConfig+0x106c>
 80015f4:	2302      	movs	r3, #2
 80015f6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015fa:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80015fe:	fa93 f3a3 	rbit	r3, r3
 8001602:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001606:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800160a:	fab3 f383 	clz	r3, r3
 800160e:	b2db      	uxtb	r3, r3
 8001610:	095b      	lsrs	r3, r3, #5
 8001612:	b2db      	uxtb	r3, r3
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	b2db      	uxtb	r3, r3
 800161a:	2b01      	cmp	r3, #1
 800161c:	d102      	bne.n	8001624 <HAL_RCC_OscConfig+0x4d8>
 800161e:	4b45      	ldr	r3, [pc, #276]	; (8001734 <HAL_RCC_OscConfig+0x5e8>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	e013      	b.n	800164c <HAL_RCC_OscConfig+0x500>
 8001624:	2302      	movs	r3, #2
 8001626:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800162a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800162e:	fa93 f3a3 	rbit	r3, r3
 8001632:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001636:	2302      	movs	r3, #2
 8001638:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800163c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001640:	fa93 f3a3 	rbit	r3, r3
 8001644:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001648:	4b3a      	ldr	r3, [pc, #232]	; (8001734 <HAL_RCC_OscConfig+0x5e8>)
 800164a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164c:	2202      	movs	r2, #2
 800164e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001652:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001656:	fa92 f2a2 	rbit	r2, r2
 800165a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800165e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001662:	fab2 f282 	clz	r2, r2
 8001666:	b2d2      	uxtb	r2, r2
 8001668:	f042 0220 	orr.w	r2, r2, #32
 800166c:	b2d2      	uxtb	r2, r2
 800166e:	f002 021f 	and.w	r2, r2, #31
 8001672:	2101      	movs	r1, #1
 8001674:	fa01 f202 	lsl.w	r2, r1, r2
 8001678:	4013      	ands	r3, r2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d0af      	beq.n	80015de <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800167e:	4b2d      	ldr	r3, [pc, #180]	; (8001734 <HAL_RCC_OscConfig+0x5e8>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001686:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800168a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	695b      	ldr	r3, [r3, #20]
 8001692:	21f8      	movs	r1, #248	; 0xf8
 8001694:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001698:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800169c:	fa91 f1a1 	rbit	r1, r1
 80016a0:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80016a4:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80016a8:	fab1 f181 	clz	r1, r1
 80016ac:	b2c9      	uxtb	r1, r1
 80016ae:	408b      	lsls	r3, r1
 80016b0:	4920      	ldr	r1, [pc, #128]	; (8001734 <HAL_RCC_OscConfig+0x5e8>)
 80016b2:	4313      	orrs	r3, r2
 80016b4:	600b      	str	r3, [r1, #0]
 80016b6:	e06c      	b.n	8001792 <HAL_RCC_OscConfig+0x646>
 80016b8:	2301      	movs	r3, #1
 80016ba:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016be:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80016c2:	fa93 f3a3 	rbit	r3, r3
 80016c6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80016ca:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016ce:	fab3 f383 	clz	r3, r3
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80016d8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	461a      	mov	r2, r3
 80016e0:	2300      	movs	r3, #0
 80016e2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e4:	f7ff f858 	bl	8000798 <HAL_GetTick>
 80016e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ec:	e00a      	b.n	8001704 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016ee:	f7ff f853 	bl	8000798 <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d902      	bls.n	8001704 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	f000 bd5a 	b.w	80021b8 <HAL_RCC_OscConfig+0x106c>
 8001704:	2302      	movs	r3, #2
 8001706:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800170a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800170e:	fa93 f3a3 	rbit	r3, r3
 8001712:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001716:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800171a:	fab3 f383 	clz	r3, r3
 800171e:	b2db      	uxtb	r3, r3
 8001720:	095b      	lsrs	r3, r3, #5
 8001722:	b2db      	uxtb	r3, r3
 8001724:	f043 0301 	orr.w	r3, r3, #1
 8001728:	b2db      	uxtb	r3, r3
 800172a:	2b01      	cmp	r3, #1
 800172c:	d104      	bne.n	8001738 <HAL_RCC_OscConfig+0x5ec>
 800172e:	4b01      	ldr	r3, [pc, #4]	; (8001734 <HAL_RCC_OscConfig+0x5e8>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	e015      	b.n	8001760 <HAL_RCC_OscConfig+0x614>
 8001734:	40021000 	.word	0x40021000
 8001738:	2302      	movs	r3, #2
 800173a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800173e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001742:	fa93 f3a3 	rbit	r3, r3
 8001746:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800174a:	2302      	movs	r3, #2
 800174c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001750:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001754:	fa93 f3a3 	rbit	r3, r3
 8001758:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800175c:	4bc8      	ldr	r3, [pc, #800]	; (8001a80 <HAL_RCC_OscConfig+0x934>)
 800175e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001760:	2202      	movs	r2, #2
 8001762:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001766:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800176a:	fa92 f2a2 	rbit	r2, r2
 800176e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001772:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001776:	fab2 f282 	clz	r2, r2
 800177a:	b2d2      	uxtb	r2, r2
 800177c:	f042 0220 	orr.w	r2, r2, #32
 8001780:	b2d2      	uxtb	r2, r2
 8001782:	f002 021f 	and.w	r2, r2, #31
 8001786:	2101      	movs	r1, #1
 8001788:	fa01 f202 	lsl.w	r2, r1, r2
 800178c:	4013      	ands	r3, r2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d1ad      	bne.n	80016ee <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001792:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001796:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0308 	and.w	r3, r3, #8
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	f000 8110 	beq.w	80019c8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d079      	beq.n	80018ac <HAL_RCC_OscConfig+0x760>
 80017b8:	2301      	movs	r3, #1
 80017ba:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017be:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80017c2:	fa93 f3a3 	rbit	r3, r3
 80017c6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80017ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017ce:	fab3 f383 	clz	r3, r3
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	461a      	mov	r2, r3
 80017d6:	4bab      	ldr	r3, [pc, #684]	; (8001a84 <HAL_RCC_OscConfig+0x938>)
 80017d8:	4413      	add	r3, r2
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	461a      	mov	r2, r3
 80017de:	2301      	movs	r3, #1
 80017e0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017e2:	f7fe ffd9 	bl	8000798 <HAL_GetTick>
 80017e6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ea:	e00a      	b.n	8001802 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017ec:	f7fe ffd4 	bl	8000798 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d902      	bls.n	8001802 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	f000 bcdb 	b.w	80021b8 <HAL_RCC_OscConfig+0x106c>
 8001802:	2302      	movs	r3, #2
 8001804:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001808:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800180c:	fa93 f3a3 	rbit	r3, r3
 8001810:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001814:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001818:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800181c:	2202      	movs	r2, #2
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001824:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	fa93 f2a3 	rbit	r2, r3
 800182e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001832:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800183c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001840:	2202      	movs	r2, #2
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001848:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	fa93 f2a3 	rbit	r2, r3
 8001852:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001856:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800185a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800185c:	4b88      	ldr	r3, [pc, #544]	; (8001a80 <HAL_RCC_OscConfig+0x934>)
 800185e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001860:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001864:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001868:	2102      	movs	r1, #2
 800186a:	6019      	str	r1, [r3, #0]
 800186c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001870:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	fa93 f1a3 	rbit	r1, r3
 800187a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800187e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001882:	6019      	str	r1, [r3, #0]
  return result;
 8001884:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001888:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	fab3 f383 	clz	r3, r3
 8001892:	b2db      	uxtb	r3, r3
 8001894:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001898:	b2db      	uxtb	r3, r3
 800189a:	f003 031f 	and.w	r3, r3, #31
 800189e:	2101      	movs	r1, #1
 80018a0:	fa01 f303 	lsl.w	r3, r1, r3
 80018a4:	4013      	ands	r3, r2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d0a0      	beq.n	80017ec <HAL_RCC_OscConfig+0x6a0>
 80018aa:	e08d      	b.n	80019c8 <HAL_RCC_OscConfig+0x87c>
 80018ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018b0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80018b4:	2201      	movs	r2, #1
 80018b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018bc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	fa93 f2a3 	rbit	r2, r3
 80018c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ca:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80018ce:	601a      	str	r2, [r3, #0]
  return result;
 80018d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018d4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80018d8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018da:	fab3 f383 	clz	r3, r3
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	461a      	mov	r2, r3
 80018e2:	4b68      	ldr	r3, [pc, #416]	; (8001a84 <HAL_RCC_OscConfig+0x938>)
 80018e4:	4413      	add	r3, r2
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	461a      	mov	r2, r3
 80018ea:	2300      	movs	r3, #0
 80018ec:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ee:	f7fe ff53 	bl	8000798 <HAL_GetTick>
 80018f2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018f6:	e00a      	b.n	800190e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018f8:	f7fe ff4e 	bl	8000798 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d902      	bls.n	800190e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	f000 bc55 	b.w	80021b8 <HAL_RCC_OscConfig+0x106c>
 800190e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001912:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001916:	2202      	movs	r2, #2
 8001918:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800191a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800191e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	fa93 f2a3 	rbit	r2, r3
 8001928:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800192c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001936:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800193a:	2202      	movs	r2, #2
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001942:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	fa93 f2a3 	rbit	r2, r3
 800194c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001950:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800195a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800195e:	2202      	movs	r2, #2
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001966:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	fa93 f2a3 	rbit	r2, r3
 8001970:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001974:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001978:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800197a:	4b41      	ldr	r3, [pc, #260]	; (8001a80 <HAL_RCC_OscConfig+0x934>)
 800197c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800197e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001982:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001986:	2102      	movs	r1, #2
 8001988:	6019      	str	r1, [r3, #0]
 800198a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800198e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	fa93 f1a3 	rbit	r1, r3
 8001998:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800199c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80019a0:	6019      	str	r1, [r3, #0]
  return result;
 80019a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019a6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	fab3 f383 	clz	r3, r3
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	f003 031f 	and.w	r3, r3, #31
 80019bc:	2101      	movs	r1, #1
 80019be:	fa01 f303 	lsl.w	r3, r1, r3
 80019c2:	4013      	ands	r3, r2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d197      	bne.n	80018f8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0304 	and.w	r3, r3, #4
 80019d8:	2b00      	cmp	r3, #0
 80019da:	f000 81a1 	beq.w	8001d20 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019de:	2300      	movs	r3, #0
 80019e0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019e4:	4b26      	ldr	r3, [pc, #152]	; (8001a80 <HAL_RCC_OscConfig+0x934>)
 80019e6:	69db      	ldr	r3, [r3, #28]
 80019e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d116      	bne.n	8001a1e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019f0:	4b23      	ldr	r3, [pc, #140]	; (8001a80 <HAL_RCC_OscConfig+0x934>)
 80019f2:	69db      	ldr	r3, [r3, #28]
 80019f4:	4a22      	ldr	r2, [pc, #136]	; (8001a80 <HAL_RCC_OscConfig+0x934>)
 80019f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019fa:	61d3      	str	r3, [r2, #28]
 80019fc:	4b20      	ldr	r3, [pc, #128]	; (8001a80 <HAL_RCC_OscConfig+0x934>)
 80019fe:	69db      	ldr	r3, [r3, #28]
 8001a00:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001a04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a08:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a12:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001a16:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a1e:	4b1a      	ldr	r3, [pc, #104]	; (8001a88 <HAL_RCC_OscConfig+0x93c>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d11a      	bne.n	8001a60 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a2a:	4b17      	ldr	r3, [pc, #92]	; (8001a88 <HAL_RCC_OscConfig+0x93c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a16      	ldr	r2, [pc, #88]	; (8001a88 <HAL_RCC_OscConfig+0x93c>)
 8001a30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a34:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a36:	f7fe feaf 	bl	8000798 <HAL_GetTick>
 8001a3a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a3e:	e009      	b.n	8001a54 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a40:	f7fe feaa 	bl	8000798 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	2b64      	cmp	r3, #100	; 0x64
 8001a4e:	d901      	bls.n	8001a54 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e3b1      	b.n	80021b8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a54:	4b0c      	ldr	r3, [pc, #48]	; (8001a88 <HAL_RCC_OscConfig+0x93c>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d0ef      	beq.n	8001a40 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a64:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d10d      	bne.n	8001a8c <HAL_RCC_OscConfig+0x940>
 8001a70:	4b03      	ldr	r3, [pc, #12]	; (8001a80 <HAL_RCC_OscConfig+0x934>)
 8001a72:	6a1b      	ldr	r3, [r3, #32]
 8001a74:	4a02      	ldr	r2, [pc, #8]	; (8001a80 <HAL_RCC_OscConfig+0x934>)
 8001a76:	f043 0301 	orr.w	r3, r3, #1
 8001a7a:	6213      	str	r3, [r2, #32]
 8001a7c:	e03c      	b.n	8001af8 <HAL_RCC_OscConfig+0x9ac>
 8001a7e:	bf00      	nop
 8001a80:	40021000 	.word	0x40021000
 8001a84:	10908120 	.word	0x10908120
 8001a88:	40007000 	.word	0x40007000
 8001a8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a90:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d10c      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x96a>
 8001a9c:	4bc1      	ldr	r3, [pc, #772]	; (8001da4 <HAL_RCC_OscConfig+0xc58>)
 8001a9e:	6a1b      	ldr	r3, [r3, #32]
 8001aa0:	4ac0      	ldr	r2, [pc, #768]	; (8001da4 <HAL_RCC_OscConfig+0xc58>)
 8001aa2:	f023 0301 	bic.w	r3, r3, #1
 8001aa6:	6213      	str	r3, [r2, #32]
 8001aa8:	4bbe      	ldr	r3, [pc, #760]	; (8001da4 <HAL_RCC_OscConfig+0xc58>)
 8001aaa:	6a1b      	ldr	r3, [r3, #32]
 8001aac:	4abd      	ldr	r2, [pc, #756]	; (8001da4 <HAL_RCC_OscConfig+0xc58>)
 8001aae:	f023 0304 	bic.w	r3, r3, #4
 8001ab2:	6213      	str	r3, [r2, #32]
 8001ab4:	e020      	b.n	8001af8 <HAL_RCC_OscConfig+0x9ac>
 8001ab6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	2b05      	cmp	r3, #5
 8001ac4:	d10c      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x994>
 8001ac6:	4bb7      	ldr	r3, [pc, #732]	; (8001da4 <HAL_RCC_OscConfig+0xc58>)
 8001ac8:	6a1b      	ldr	r3, [r3, #32]
 8001aca:	4ab6      	ldr	r2, [pc, #728]	; (8001da4 <HAL_RCC_OscConfig+0xc58>)
 8001acc:	f043 0304 	orr.w	r3, r3, #4
 8001ad0:	6213      	str	r3, [r2, #32]
 8001ad2:	4bb4      	ldr	r3, [pc, #720]	; (8001da4 <HAL_RCC_OscConfig+0xc58>)
 8001ad4:	6a1b      	ldr	r3, [r3, #32]
 8001ad6:	4ab3      	ldr	r2, [pc, #716]	; (8001da4 <HAL_RCC_OscConfig+0xc58>)
 8001ad8:	f043 0301 	orr.w	r3, r3, #1
 8001adc:	6213      	str	r3, [r2, #32]
 8001ade:	e00b      	b.n	8001af8 <HAL_RCC_OscConfig+0x9ac>
 8001ae0:	4bb0      	ldr	r3, [pc, #704]	; (8001da4 <HAL_RCC_OscConfig+0xc58>)
 8001ae2:	6a1b      	ldr	r3, [r3, #32]
 8001ae4:	4aaf      	ldr	r2, [pc, #700]	; (8001da4 <HAL_RCC_OscConfig+0xc58>)
 8001ae6:	f023 0301 	bic.w	r3, r3, #1
 8001aea:	6213      	str	r3, [r2, #32]
 8001aec:	4bad      	ldr	r3, [pc, #692]	; (8001da4 <HAL_RCC_OscConfig+0xc58>)
 8001aee:	6a1b      	ldr	r3, [r3, #32]
 8001af0:	4aac      	ldr	r2, [pc, #688]	; (8001da4 <HAL_RCC_OscConfig+0xc58>)
 8001af2:	f023 0304 	bic.w	r3, r3, #4
 8001af6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001af8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001afc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	f000 8081 	beq.w	8001c0c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b0a:	f7fe fe45 	bl	8000798 <HAL_GetTick>
 8001b0e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b12:	e00b      	b.n	8001b2c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b14:	f7fe fe40 	bl	8000798 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d901      	bls.n	8001b2c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e345      	b.n	80021b8 <HAL_RCC_OscConfig+0x106c>
 8001b2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b30:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001b34:	2202      	movs	r2, #2
 8001b36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b3c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	fa93 f2a3 	rbit	r2, r3
 8001b46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b4a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b54:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001b58:	2202      	movs	r2, #2
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b60:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	fa93 f2a3 	rbit	r2, r3
 8001b6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b6e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001b72:	601a      	str	r2, [r3, #0]
  return result;
 8001b74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b78:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001b7c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b7e:	fab3 f383 	clz	r3, r3
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	095b      	lsrs	r3, r3, #5
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	f043 0302 	orr.w	r3, r3, #2
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d102      	bne.n	8001b98 <HAL_RCC_OscConfig+0xa4c>
 8001b92:	4b84      	ldr	r3, [pc, #528]	; (8001da4 <HAL_RCC_OscConfig+0xc58>)
 8001b94:	6a1b      	ldr	r3, [r3, #32]
 8001b96:	e013      	b.n	8001bc0 <HAL_RCC_OscConfig+0xa74>
 8001b98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b9c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001ba0:	2202      	movs	r2, #2
 8001ba2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	fa93 f2a3 	rbit	r2, r3
 8001bb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	4b79      	ldr	r3, [pc, #484]	; (8001da4 <HAL_RCC_OscConfig+0xc58>)
 8001bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bc4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001bc8:	2102      	movs	r1, #2
 8001bca:	6011      	str	r1, [r2, #0]
 8001bcc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bd0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001bd4:	6812      	ldr	r2, [r2, #0]
 8001bd6:	fa92 f1a2 	rbit	r1, r2
 8001bda:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bde:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001be2:	6011      	str	r1, [r2, #0]
  return result;
 8001be4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001be8:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001bec:	6812      	ldr	r2, [r2, #0]
 8001bee:	fab2 f282 	clz	r2, r2
 8001bf2:	b2d2      	uxtb	r2, r2
 8001bf4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bf8:	b2d2      	uxtb	r2, r2
 8001bfa:	f002 021f 	and.w	r2, r2, #31
 8001bfe:	2101      	movs	r1, #1
 8001c00:	fa01 f202 	lsl.w	r2, r1, r2
 8001c04:	4013      	ands	r3, r2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d084      	beq.n	8001b14 <HAL_RCC_OscConfig+0x9c8>
 8001c0a:	e07f      	b.n	8001d0c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c0c:	f7fe fdc4 	bl	8000798 <HAL_GetTick>
 8001c10:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c14:	e00b      	b.n	8001c2e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c16:	f7fe fdbf 	bl	8000798 <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e2c4      	b.n	80021b8 <HAL_RCC_OscConfig+0x106c>
 8001c2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c32:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001c36:	2202      	movs	r2, #2
 8001c38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c3e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	fa93 f2a3 	rbit	r2, r3
 8001c48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c4c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c56:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001c5a:	2202      	movs	r2, #2
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c62:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	fa93 f2a3 	rbit	r2, r3
 8001c6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c70:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001c74:	601a      	str	r2, [r3, #0]
  return result;
 8001c76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c7a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001c7e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c80:	fab3 f383 	clz	r3, r3
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	095b      	lsrs	r3, r3, #5
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	f043 0302 	orr.w	r3, r3, #2
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d102      	bne.n	8001c9a <HAL_RCC_OscConfig+0xb4e>
 8001c94:	4b43      	ldr	r3, [pc, #268]	; (8001da4 <HAL_RCC_OscConfig+0xc58>)
 8001c96:	6a1b      	ldr	r3, [r3, #32]
 8001c98:	e013      	b.n	8001cc2 <HAL_RCC_OscConfig+0xb76>
 8001c9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c9e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001ca2:	2202      	movs	r2, #2
 8001ca4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001caa:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	fa93 f2a3 	rbit	r2, r3
 8001cb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001cbc:	601a      	str	r2, [r3, #0]
 8001cbe:	4b39      	ldr	r3, [pc, #228]	; (8001da4 <HAL_RCC_OscConfig+0xc58>)
 8001cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cc6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001cca:	2102      	movs	r1, #2
 8001ccc:	6011      	str	r1, [r2, #0]
 8001cce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cd2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001cd6:	6812      	ldr	r2, [r2, #0]
 8001cd8:	fa92 f1a2 	rbit	r1, r2
 8001cdc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ce0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001ce4:	6011      	str	r1, [r2, #0]
  return result;
 8001ce6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cea:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001cee:	6812      	ldr	r2, [r2, #0]
 8001cf0:	fab2 f282 	clz	r2, r2
 8001cf4:	b2d2      	uxtb	r2, r2
 8001cf6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cfa:	b2d2      	uxtb	r2, r2
 8001cfc:	f002 021f 	and.w	r2, r2, #31
 8001d00:	2101      	movs	r1, #1
 8001d02:	fa01 f202 	lsl.w	r2, r1, r2
 8001d06:	4013      	ands	r3, r2
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d184      	bne.n	8001c16 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d0c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d105      	bne.n	8001d20 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d14:	4b23      	ldr	r3, [pc, #140]	; (8001da4 <HAL_RCC_OscConfig+0xc58>)
 8001d16:	69db      	ldr	r3, [r3, #28]
 8001d18:	4a22      	ldr	r2, [pc, #136]	; (8001da4 <HAL_RCC_OscConfig+0xc58>)
 8001d1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d1e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d24:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	69db      	ldr	r3, [r3, #28]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	f000 8242 	beq.w	80021b6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d32:	4b1c      	ldr	r3, [pc, #112]	; (8001da4 <HAL_RCC_OscConfig+0xc58>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f003 030c 	and.w	r3, r3, #12
 8001d3a:	2b08      	cmp	r3, #8
 8001d3c:	f000 8213 	beq.w	8002166 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d44:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	69db      	ldr	r3, [r3, #28]
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	f040 8162 	bne.w	8002016 <HAL_RCC_OscConfig+0xeca>
 8001d52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d56:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001d5a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d64:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	fa93 f2a3 	rbit	r2, r3
 8001d6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d72:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001d76:	601a      	str	r2, [r3, #0]
  return result;
 8001d78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d7c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001d80:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d82:	fab3 f383 	clz	r3, r3
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d8c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	461a      	mov	r2, r3
 8001d94:	2300      	movs	r3, #0
 8001d96:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d98:	f7fe fcfe 	bl	8000798 <HAL_GetTick>
 8001d9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001da0:	e00c      	b.n	8001dbc <HAL_RCC_OscConfig+0xc70>
 8001da2:	bf00      	nop
 8001da4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001da8:	f7fe fcf6 	bl	8000798 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d901      	bls.n	8001dbc <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e1fd      	b.n	80021b8 <HAL_RCC_OscConfig+0x106c>
 8001dbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dc0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001dc4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dc8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dce:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	fa93 f2a3 	rbit	r2, r3
 8001dd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ddc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001de0:	601a      	str	r2, [r3, #0]
  return result;
 8001de2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001de6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001dea:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dec:	fab3 f383 	clz	r3, r3
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	095b      	lsrs	r3, r3, #5
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	f043 0301 	orr.w	r3, r3, #1
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d102      	bne.n	8001e06 <HAL_RCC_OscConfig+0xcba>
 8001e00:	4bb0      	ldr	r3, [pc, #704]	; (80020c4 <HAL_RCC_OscConfig+0xf78>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	e027      	b.n	8001e56 <HAL_RCC_OscConfig+0xd0a>
 8001e06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e0a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001e0e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e18:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	fa93 f2a3 	rbit	r2, r3
 8001e22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e26:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e30:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001e34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e38:	601a      	str	r2, [r3, #0]
 8001e3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e3e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	fa93 f2a3 	rbit	r2, r3
 8001e48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e4c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001e50:	601a      	str	r2, [r3, #0]
 8001e52:	4b9c      	ldr	r3, [pc, #624]	; (80020c4 <HAL_RCC_OscConfig+0xf78>)
 8001e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e56:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e5a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001e5e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e62:	6011      	str	r1, [r2, #0]
 8001e64:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e68:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001e6c:	6812      	ldr	r2, [r2, #0]
 8001e6e:	fa92 f1a2 	rbit	r1, r2
 8001e72:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e76:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001e7a:	6011      	str	r1, [r2, #0]
  return result;
 8001e7c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e80:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001e84:	6812      	ldr	r2, [r2, #0]
 8001e86:	fab2 f282 	clz	r2, r2
 8001e8a:	b2d2      	uxtb	r2, r2
 8001e8c:	f042 0220 	orr.w	r2, r2, #32
 8001e90:	b2d2      	uxtb	r2, r2
 8001e92:	f002 021f 	and.w	r2, r2, #31
 8001e96:	2101      	movs	r1, #1
 8001e98:	fa01 f202 	lsl.w	r2, r1, r2
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d182      	bne.n	8001da8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ea2:	4b88      	ldr	r3, [pc, #544]	; (80020c4 <HAL_RCC_OscConfig+0xf78>)
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001eaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001eb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	6a1b      	ldr	r3, [r3, #32]
 8001ec2:	430b      	orrs	r3, r1
 8001ec4:	497f      	ldr	r1, [pc, #508]	; (80020c4 <HAL_RCC_OscConfig+0xf78>)
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	604b      	str	r3, [r1, #4]
 8001eca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ece:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001ed2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ed6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001edc:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	fa93 f2a3 	rbit	r2, r3
 8001ee6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eea:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001eee:	601a      	str	r2, [r3, #0]
  return result;
 8001ef0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ef4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001ef8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001efa:	fab3 f383 	clz	r3, r3
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f04:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f10:	f7fe fc42 	bl	8000798 <HAL_GetTick>
 8001f14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f18:	e009      	b.n	8001f2e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f1a:	f7fe fc3d 	bl	8000798 <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e144      	b.n	80021b8 <HAL_RCC_OscConfig+0x106c>
 8001f2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f32:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001f36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f40:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	fa93 f2a3 	rbit	r2, r3
 8001f4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f4e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001f52:	601a      	str	r2, [r3, #0]
  return result;
 8001f54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f58:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001f5c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f5e:	fab3 f383 	clz	r3, r3
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	095b      	lsrs	r3, r3, #5
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	f043 0301 	orr.w	r3, r3, #1
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d102      	bne.n	8001f78 <HAL_RCC_OscConfig+0xe2c>
 8001f72:	4b54      	ldr	r3, [pc, #336]	; (80020c4 <HAL_RCC_OscConfig+0xf78>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	e027      	b.n	8001fc8 <HAL_RCC_OscConfig+0xe7c>
 8001f78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f7c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001f80:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f8a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	fa93 f2a3 	rbit	r2, r3
 8001f94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f98:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fa2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001fa6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fb0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	fa93 f2a3 	rbit	r2, r3
 8001fba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fbe:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	4b3f      	ldr	r3, [pc, #252]	; (80020c4 <HAL_RCC_OscConfig+0xf78>)
 8001fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001fcc:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001fd0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001fd4:	6011      	str	r1, [r2, #0]
 8001fd6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001fda:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001fde:	6812      	ldr	r2, [r2, #0]
 8001fe0:	fa92 f1a2 	rbit	r1, r2
 8001fe4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001fe8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001fec:	6011      	str	r1, [r2, #0]
  return result;
 8001fee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ff2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001ff6:	6812      	ldr	r2, [r2, #0]
 8001ff8:	fab2 f282 	clz	r2, r2
 8001ffc:	b2d2      	uxtb	r2, r2
 8001ffe:	f042 0220 	orr.w	r2, r2, #32
 8002002:	b2d2      	uxtb	r2, r2
 8002004:	f002 021f 	and.w	r2, r2, #31
 8002008:	2101      	movs	r1, #1
 800200a:	fa01 f202 	lsl.w	r2, r1, r2
 800200e:	4013      	ands	r3, r2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d082      	beq.n	8001f1a <HAL_RCC_OscConfig+0xdce>
 8002014:	e0cf      	b.n	80021b6 <HAL_RCC_OscConfig+0x106a>
 8002016:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800201a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800201e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002022:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002024:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002028:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	fa93 f2a3 	rbit	r2, r3
 8002032:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002036:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800203a:	601a      	str	r2, [r3, #0]
  return result;
 800203c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002040:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002044:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002046:	fab3 f383 	clz	r3, r3
 800204a:	b2db      	uxtb	r3, r3
 800204c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002050:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	461a      	mov	r2, r3
 8002058:	2300      	movs	r3, #0
 800205a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800205c:	f7fe fb9c 	bl	8000798 <HAL_GetTick>
 8002060:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002064:	e009      	b.n	800207a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002066:	f7fe fb97 	bl	8000798 <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b02      	cmp	r3, #2
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e09e      	b.n	80021b8 <HAL_RCC_OscConfig+0x106c>
 800207a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800207e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002082:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002086:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002088:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800208c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	fa93 f2a3 	rbit	r2, r3
 8002096:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800209a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800209e:	601a      	str	r2, [r3, #0]
  return result;
 80020a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020a4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80020a8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020aa:	fab3 f383 	clz	r3, r3
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	095b      	lsrs	r3, r3, #5
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	f043 0301 	orr.w	r3, r3, #1
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d104      	bne.n	80020c8 <HAL_RCC_OscConfig+0xf7c>
 80020be:	4b01      	ldr	r3, [pc, #4]	; (80020c4 <HAL_RCC_OscConfig+0xf78>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	e029      	b.n	8002118 <HAL_RCC_OscConfig+0xfcc>
 80020c4:	40021000 	.word	0x40021000
 80020c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020cc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80020d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020da:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	fa93 f2a3 	rbit	r2, r3
 80020e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020e8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80020ec:	601a      	str	r2, [r3, #0]
 80020ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020f2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80020f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002100:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	fa93 f2a3 	rbit	r2, r3
 800210a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800210e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	4b2b      	ldr	r3, [pc, #172]	; (80021c4 <HAL_RCC_OscConfig+0x1078>)
 8002116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002118:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800211c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002120:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002124:	6011      	str	r1, [r2, #0]
 8002126:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800212a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800212e:	6812      	ldr	r2, [r2, #0]
 8002130:	fa92 f1a2 	rbit	r1, r2
 8002134:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002138:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800213c:	6011      	str	r1, [r2, #0]
  return result;
 800213e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002142:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002146:	6812      	ldr	r2, [r2, #0]
 8002148:	fab2 f282 	clz	r2, r2
 800214c:	b2d2      	uxtb	r2, r2
 800214e:	f042 0220 	orr.w	r2, r2, #32
 8002152:	b2d2      	uxtb	r2, r2
 8002154:	f002 021f 	and.w	r2, r2, #31
 8002158:	2101      	movs	r1, #1
 800215a:	fa01 f202 	lsl.w	r2, r1, r2
 800215e:	4013      	ands	r3, r2
 8002160:	2b00      	cmp	r3, #0
 8002162:	d180      	bne.n	8002066 <HAL_RCC_OscConfig+0xf1a>
 8002164:	e027      	b.n	80021b6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002166:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800216a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	69db      	ldr	r3, [r3, #28]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d101      	bne.n	800217a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e01e      	b.n	80021b8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800217a:	4b12      	ldr	r3, [pc, #72]	; (80021c4 <HAL_RCC_OscConfig+0x1078>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002182:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002186:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800218a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800218e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	6a1b      	ldr	r3, [r3, #32]
 8002196:	429a      	cmp	r2, r3
 8002198:	d10b      	bne.n	80021b2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800219a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800219e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80021a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d001      	beq.n	80021b6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e000      	b.n	80021b8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80021b6:	2300      	movs	r3, #0
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	40021000 	.word	0x40021000

080021c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b09e      	sub	sp, #120	; 0x78
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80021d2:	2300      	movs	r3, #0
 80021d4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d101      	bne.n	80021e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e162      	b.n	80024a6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021e0:	4b90      	ldr	r3, [pc, #576]	; (8002424 <HAL_RCC_ClockConfig+0x25c>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0307 	and.w	r3, r3, #7
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d910      	bls.n	8002210 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ee:	4b8d      	ldr	r3, [pc, #564]	; (8002424 <HAL_RCC_ClockConfig+0x25c>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f023 0207 	bic.w	r2, r3, #7
 80021f6:	498b      	ldr	r1, [pc, #556]	; (8002424 <HAL_RCC_ClockConfig+0x25c>)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021fe:	4b89      	ldr	r3, [pc, #548]	; (8002424 <HAL_RCC_ClockConfig+0x25c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0307 	and.w	r3, r3, #7
 8002206:	683a      	ldr	r2, [r7, #0]
 8002208:	429a      	cmp	r2, r3
 800220a:	d001      	beq.n	8002210 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e14a      	b.n	80024a6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d008      	beq.n	800222e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800221c:	4b82      	ldr	r3, [pc, #520]	; (8002428 <HAL_RCC_ClockConfig+0x260>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	497f      	ldr	r1, [pc, #508]	; (8002428 <HAL_RCC_ClockConfig+0x260>)
 800222a:	4313      	orrs	r3, r2
 800222c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	2b00      	cmp	r3, #0
 8002238:	f000 80dc 	beq.w	80023f4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d13c      	bne.n	80022be <HAL_RCC_ClockConfig+0xf6>
 8002244:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002248:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800224c:	fa93 f3a3 	rbit	r3, r3
 8002250:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002252:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002254:	fab3 f383 	clz	r3, r3
 8002258:	b2db      	uxtb	r3, r3
 800225a:	095b      	lsrs	r3, r3, #5
 800225c:	b2db      	uxtb	r3, r3
 800225e:	f043 0301 	orr.w	r3, r3, #1
 8002262:	b2db      	uxtb	r3, r3
 8002264:	2b01      	cmp	r3, #1
 8002266:	d102      	bne.n	800226e <HAL_RCC_ClockConfig+0xa6>
 8002268:	4b6f      	ldr	r3, [pc, #444]	; (8002428 <HAL_RCC_ClockConfig+0x260>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	e00f      	b.n	800228e <HAL_RCC_ClockConfig+0xc6>
 800226e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002272:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002274:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002276:	fa93 f3a3 	rbit	r3, r3
 800227a:	667b      	str	r3, [r7, #100]	; 0x64
 800227c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002280:	663b      	str	r3, [r7, #96]	; 0x60
 8002282:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002284:	fa93 f3a3 	rbit	r3, r3
 8002288:	65fb      	str	r3, [r7, #92]	; 0x5c
 800228a:	4b67      	ldr	r3, [pc, #412]	; (8002428 <HAL_RCC_ClockConfig+0x260>)
 800228c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002292:	65ba      	str	r2, [r7, #88]	; 0x58
 8002294:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002296:	fa92 f2a2 	rbit	r2, r2
 800229a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800229c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800229e:	fab2 f282 	clz	r2, r2
 80022a2:	b2d2      	uxtb	r2, r2
 80022a4:	f042 0220 	orr.w	r2, r2, #32
 80022a8:	b2d2      	uxtb	r2, r2
 80022aa:	f002 021f 	and.w	r2, r2, #31
 80022ae:	2101      	movs	r1, #1
 80022b0:	fa01 f202 	lsl.w	r2, r1, r2
 80022b4:	4013      	ands	r3, r2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d17b      	bne.n	80023b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e0f3      	b.n	80024a6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d13c      	bne.n	8002340 <HAL_RCC_ClockConfig+0x178>
 80022c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022ca:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022ce:	fa93 f3a3 	rbit	r3, r3
 80022d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80022d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022d6:	fab3 f383 	clz	r3, r3
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	095b      	lsrs	r3, r3, #5
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	f043 0301 	orr.w	r3, r3, #1
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d102      	bne.n	80022f0 <HAL_RCC_ClockConfig+0x128>
 80022ea:	4b4f      	ldr	r3, [pc, #316]	; (8002428 <HAL_RCC_ClockConfig+0x260>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	e00f      	b.n	8002310 <HAL_RCC_ClockConfig+0x148>
 80022f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022f4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022f8:	fa93 f3a3 	rbit	r3, r3
 80022fc:	647b      	str	r3, [r7, #68]	; 0x44
 80022fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002302:	643b      	str	r3, [r7, #64]	; 0x40
 8002304:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002306:	fa93 f3a3 	rbit	r3, r3
 800230a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800230c:	4b46      	ldr	r3, [pc, #280]	; (8002428 <HAL_RCC_ClockConfig+0x260>)
 800230e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002310:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002314:	63ba      	str	r2, [r7, #56]	; 0x38
 8002316:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002318:	fa92 f2a2 	rbit	r2, r2
 800231c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800231e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002320:	fab2 f282 	clz	r2, r2
 8002324:	b2d2      	uxtb	r2, r2
 8002326:	f042 0220 	orr.w	r2, r2, #32
 800232a:	b2d2      	uxtb	r2, r2
 800232c:	f002 021f 	and.w	r2, r2, #31
 8002330:	2101      	movs	r1, #1
 8002332:	fa01 f202 	lsl.w	r2, r1, r2
 8002336:	4013      	ands	r3, r2
 8002338:	2b00      	cmp	r3, #0
 800233a:	d13a      	bne.n	80023b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e0b2      	b.n	80024a6 <HAL_RCC_ClockConfig+0x2de>
 8002340:	2302      	movs	r3, #2
 8002342:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002346:	fa93 f3a3 	rbit	r3, r3
 800234a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800234c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800234e:	fab3 f383 	clz	r3, r3
 8002352:	b2db      	uxtb	r3, r3
 8002354:	095b      	lsrs	r3, r3, #5
 8002356:	b2db      	uxtb	r3, r3
 8002358:	f043 0301 	orr.w	r3, r3, #1
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b01      	cmp	r3, #1
 8002360:	d102      	bne.n	8002368 <HAL_RCC_ClockConfig+0x1a0>
 8002362:	4b31      	ldr	r3, [pc, #196]	; (8002428 <HAL_RCC_ClockConfig+0x260>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	e00d      	b.n	8002384 <HAL_RCC_ClockConfig+0x1bc>
 8002368:	2302      	movs	r3, #2
 800236a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800236e:	fa93 f3a3 	rbit	r3, r3
 8002372:	627b      	str	r3, [r7, #36]	; 0x24
 8002374:	2302      	movs	r3, #2
 8002376:	623b      	str	r3, [r7, #32]
 8002378:	6a3b      	ldr	r3, [r7, #32]
 800237a:	fa93 f3a3 	rbit	r3, r3
 800237e:	61fb      	str	r3, [r7, #28]
 8002380:	4b29      	ldr	r3, [pc, #164]	; (8002428 <HAL_RCC_ClockConfig+0x260>)
 8002382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002384:	2202      	movs	r2, #2
 8002386:	61ba      	str	r2, [r7, #24]
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	fa92 f2a2 	rbit	r2, r2
 800238e:	617a      	str	r2, [r7, #20]
  return result;
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	fab2 f282 	clz	r2, r2
 8002396:	b2d2      	uxtb	r2, r2
 8002398:	f042 0220 	orr.w	r2, r2, #32
 800239c:	b2d2      	uxtb	r2, r2
 800239e:	f002 021f 	and.w	r2, r2, #31
 80023a2:	2101      	movs	r1, #1
 80023a4:	fa01 f202 	lsl.w	r2, r1, r2
 80023a8:	4013      	ands	r3, r2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d101      	bne.n	80023b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e079      	b.n	80024a6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023b2:	4b1d      	ldr	r3, [pc, #116]	; (8002428 <HAL_RCC_ClockConfig+0x260>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f023 0203 	bic.w	r2, r3, #3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	491a      	ldr	r1, [pc, #104]	; (8002428 <HAL_RCC_ClockConfig+0x260>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023c4:	f7fe f9e8 	bl	8000798 <HAL_GetTick>
 80023c8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ca:	e00a      	b.n	80023e2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023cc:	f7fe f9e4 	bl	8000798 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023da:	4293      	cmp	r3, r2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e061      	b.n	80024a6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023e2:	4b11      	ldr	r3, [pc, #68]	; (8002428 <HAL_RCC_ClockConfig+0x260>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f003 020c 	and.w	r2, r3, #12
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d1eb      	bne.n	80023cc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023f4:	4b0b      	ldr	r3, [pc, #44]	; (8002424 <HAL_RCC_ClockConfig+0x25c>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0307 	and.w	r3, r3, #7
 80023fc:	683a      	ldr	r2, [r7, #0]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d214      	bcs.n	800242c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002402:	4b08      	ldr	r3, [pc, #32]	; (8002424 <HAL_RCC_ClockConfig+0x25c>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f023 0207 	bic.w	r2, r3, #7
 800240a:	4906      	ldr	r1, [pc, #24]	; (8002424 <HAL_RCC_ClockConfig+0x25c>)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	4313      	orrs	r3, r2
 8002410:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002412:	4b04      	ldr	r3, [pc, #16]	; (8002424 <HAL_RCC_ClockConfig+0x25c>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0307 	and.w	r3, r3, #7
 800241a:	683a      	ldr	r2, [r7, #0]
 800241c:	429a      	cmp	r2, r3
 800241e:	d005      	beq.n	800242c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e040      	b.n	80024a6 <HAL_RCC_ClockConfig+0x2de>
 8002424:	40022000 	.word	0x40022000
 8002428:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0304 	and.w	r3, r3, #4
 8002434:	2b00      	cmp	r3, #0
 8002436:	d008      	beq.n	800244a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002438:	4b1d      	ldr	r3, [pc, #116]	; (80024b0 <HAL_RCC_ClockConfig+0x2e8>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	491a      	ldr	r1, [pc, #104]	; (80024b0 <HAL_RCC_ClockConfig+0x2e8>)
 8002446:	4313      	orrs	r3, r2
 8002448:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0308 	and.w	r3, r3, #8
 8002452:	2b00      	cmp	r3, #0
 8002454:	d009      	beq.n	800246a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002456:	4b16      	ldr	r3, [pc, #88]	; (80024b0 <HAL_RCC_ClockConfig+0x2e8>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	4912      	ldr	r1, [pc, #72]	; (80024b0 <HAL_RCC_ClockConfig+0x2e8>)
 8002466:	4313      	orrs	r3, r2
 8002468:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800246a:	f000 f829 	bl	80024c0 <HAL_RCC_GetSysClockFreq>
 800246e:	4601      	mov	r1, r0
 8002470:	4b0f      	ldr	r3, [pc, #60]	; (80024b0 <HAL_RCC_ClockConfig+0x2e8>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002478:	22f0      	movs	r2, #240	; 0xf0
 800247a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	fa92 f2a2 	rbit	r2, r2
 8002482:	60fa      	str	r2, [r7, #12]
  return result;
 8002484:	68fa      	ldr	r2, [r7, #12]
 8002486:	fab2 f282 	clz	r2, r2
 800248a:	b2d2      	uxtb	r2, r2
 800248c:	40d3      	lsrs	r3, r2
 800248e:	4a09      	ldr	r2, [pc, #36]	; (80024b4 <HAL_RCC_ClockConfig+0x2ec>)
 8002490:	5cd3      	ldrb	r3, [r2, r3]
 8002492:	fa21 f303 	lsr.w	r3, r1, r3
 8002496:	4a08      	ldr	r2, [pc, #32]	; (80024b8 <HAL_RCC_ClockConfig+0x2f0>)
 8002498:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800249a:	4b08      	ldr	r3, [pc, #32]	; (80024bc <HAL_RCC_ClockConfig+0x2f4>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f7fe f936 	bl	8000710 <HAL_InitTick>
  
  return HAL_OK;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3778      	adds	r7, #120	; 0x78
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	40021000 	.word	0x40021000
 80024b4:	08003e3c 	.word	0x08003e3c
 80024b8:	20000000 	.word	0x20000000
 80024bc:	20000004 	.word	0x20000004

080024c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b08b      	sub	sp, #44	; 0x2c
 80024c4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024c6:	2300      	movs	r3, #0
 80024c8:	61fb      	str	r3, [r7, #28]
 80024ca:	2300      	movs	r3, #0
 80024cc:	61bb      	str	r3, [r7, #24]
 80024ce:	2300      	movs	r3, #0
 80024d0:	627b      	str	r3, [r7, #36]	; 0x24
 80024d2:	2300      	movs	r3, #0
 80024d4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80024d6:	2300      	movs	r3, #0
 80024d8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80024da:	4b29      	ldr	r3, [pc, #164]	; (8002580 <HAL_RCC_GetSysClockFreq+0xc0>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	f003 030c 	and.w	r3, r3, #12
 80024e6:	2b04      	cmp	r3, #4
 80024e8:	d002      	beq.n	80024f0 <HAL_RCC_GetSysClockFreq+0x30>
 80024ea:	2b08      	cmp	r3, #8
 80024ec:	d003      	beq.n	80024f6 <HAL_RCC_GetSysClockFreq+0x36>
 80024ee:	e03c      	b.n	800256a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024f0:	4b24      	ldr	r3, [pc, #144]	; (8002584 <HAL_RCC_GetSysClockFreq+0xc4>)
 80024f2:	623b      	str	r3, [r7, #32]
      break;
 80024f4:	e03c      	b.n	8002570 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80024fc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002500:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002502:	68ba      	ldr	r2, [r7, #8]
 8002504:	fa92 f2a2 	rbit	r2, r2
 8002508:	607a      	str	r2, [r7, #4]
  return result;
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	fab2 f282 	clz	r2, r2
 8002510:	b2d2      	uxtb	r2, r2
 8002512:	40d3      	lsrs	r3, r2
 8002514:	4a1c      	ldr	r2, [pc, #112]	; (8002588 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002516:	5cd3      	ldrb	r3, [r2, r3]
 8002518:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800251a:	4b19      	ldr	r3, [pc, #100]	; (8002580 <HAL_RCC_GetSysClockFreq+0xc0>)
 800251c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800251e:	f003 030f 	and.w	r3, r3, #15
 8002522:	220f      	movs	r2, #15
 8002524:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	fa92 f2a2 	rbit	r2, r2
 800252c:	60fa      	str	r2, [r7, #12]
  return result;
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	fab2 f282 	clz	r2, r2
 8002534:	b2d2      	uxtb	r2, r2
 8002536:	40d3      	lsrs	r3, r2
 8002538:	4a14      	ldr	r2, [pc, #80]	; (800258c <HAL_RCC_GetSysClockFreq+0xcc>)
 800253a:	5cd3      	ldrb	r3, [r2, r3]
 800253c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d008      	beq.n	800255a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002548:	4a0e      	ldr	r2, [pc, #56]	; (8002584 <HAL_RCC_GetSysClockFreq+0xc4>)
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	fb02 f303 	mul.w	r3, r2, r3
 8002556:	627b      	str	r3, [r7, #36]	; 0x24
 8002558:	e004      	b.n	8002564 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	4a0c      	ldr	r2, [pc, #48]	; (8002590 <HAL_RCC_GetSysClockFreq+0xd0>)
 800255e:	fb02 f303 	mul.w	r3, r2, r3
 8002562:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002566:	623b      	str	r3, [r7, #32]
      break;
 8002568:	e002      	b.n	8002570 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800256a:	4b06      	ldr	r3, [pc, #24]	; (8002584 <HAL_RCC_GetSysClockFreq+0xc4>)
 800256c:	623b      	str	r3, [r7, #32]
      break;
 800256e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002570:	6a3b      	ldr	r3, [r7, #32]
}
 8002572:	4618      	mov	r0, r3
 8002574:	372c      	adds	r7, #44	; 0x2c
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	40021000 	.word	0x40021000
 8002584:	007a1200 	.word	0x007a1200
 8002588:	08003e54 	.word	0x08003e54
 800258c:	08003e64 	.word	0x08003e64
 8002590:	003d0900 	.word	0x003d0900

08002594 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002598:	4b03      	ldr	r3, [pc, #12]	; (80025a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800259a:	681b      	ldr	r3, [r3, #0]
}
 800259c:	4618      	mov	r0, r3
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	20000000 	.word	0x20000000

080025ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80025b2:	f7ff ffef 	bl	8002594 <HAL_RCC_GetHCLKFreq>
 80025b6:	4601      	mov	r1, r0
 80025b8:	4b0b      	ldr	r3, [pc, #44]	; (80025e8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80025c0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80025c4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	fa92 f2a2 	rbit	r2, r2
 80025cc:	603a      	str	r2, [r7, #0]
  return result;
 80025ce:	683a      	ldr	r2, [r7, #0]
 80025d0:	fab2 f282 	clz	r2, r2
 80025d4:	b2d2      	uxtb	r2, r2
 80025d6:	40d3      	lsrs	r3, r2
 80025d8:	4a04      	ldr	r2, [pc, #16]	; (80025ec <HAL_RCC_GetPCLK1Freq+0x40>)
 80025da:	5cd3      	ldrb	r3, [r2, r3]
 80025dc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80025e0:	4618      	mov	r0, r3
 80025e2:	3708      	adds	r7, #8
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	40021000 	.word	0x40021000
 80025ec:	08003e4c 	.word	0x08003e4c

080025f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80025f6:	f7ff ffcd 	bl	8002594 <HAL_RCC_GetHCLKFreq>
 80025fa:	4601      	mov	r1, r0
 80025fc:	4b0b      	ldr	r3, [pc, #44]	; (800262c <HAL_RCC_GetPCLK2Freq+0x3c>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002604:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002608:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	fa92 f2a2 	rbit	r2, r2
 8002610:	603a      	str	r2, [r7, #0]
  return result;
 8002612:	683a      	ldr	r2, [r7, #0]
 8002614:	fab2 f282 	clz	r2, r2
 8002618:	b2d2      	uxtb	r2, r2
 800261a:	40d3      	lsrs	r3, r2
 800261c:	4a04      	ldr	r2, [pc, #16]	; (8002630 <HAL_RCC_GetPCLK2Freq+0x40>)
 800261e:	5cd3      	ldrb	r3, [r2, r3]
 8002620:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002624:	4618      	mov	r0, r3
 8002626:	3708      	adds	r7, #8
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	40021000 	.word	0x40021000
 8002630:	08003e4c 	.word	0x08003e4c

08002634 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b092      	sub	sp, #72	; 0x48
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800263c:	2300      	movs	r3, #0
 800263e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002640:	2300      	movs	r3, #0
 8002642:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002644:	2300      	movs	r3, #0
 8002646:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002652:	2b00      	cmp	r3, #0
 8002654:	f000 80d4 	beq.w	8002800 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002658:	4b4e      	ldr	r3, [pc, #312]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800265a:	69db      	ldr	r3, [r3, #28]
 800265c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d10e      	bne.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002664:	4b4b      	ldr	r3, [pc, #300]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002666:	69db      	ldr	r3, [r3, #28]
 8002668:	4a4a      	ldr	r2, [pc, #296]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800266a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800266e:	61d3      	str	r3, [r2, #28]
 8002670:	4b48      	ldr	r3, [pc, #288]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002672:	69db      	ldr	r3, [r3, #28]
 8002674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002678:	60bb      	str	r3, [r7, #8]
 800267a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800267c:	2301      	movs	r3, #1
 800267e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002682:	4b45      	ldr	r3, [pc, #276]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800268a:	2b00      	cmp	r3, #0
 800268c:	d118      	bne.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800268e:	4b42      	ldr	r3, [pc, #264]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a41      	ldr	r2, [pc, #260]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002694:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002698:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800269a:	f7fe f87d 	bl	8000798 <HAL_GetTick>
 800269e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a0:	e008      	b.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026a2:	f7fe f879 	bl	8000798 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b64      	cmp	r3, #100	; 0x64
 80026ae:	d901      	bls.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e169      	b.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b4:	4b38      	ldr	r3, [pc, #224]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d0f0      	beq.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80026c0:	4b34      	ldr	r3, [pc, #208]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026c2:	6a1b      	ldr	r3, [r3, #32]
 80026c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80026ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f000 8084 	beq.w	80027da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80026dc:	429a      	cmp	r2, r3
 80026de:	d07c      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80026e0:	4b2c      	ldr	r3, [pc, #176]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026e2:	6a1b      	ldr	r3, [r3, #32]
 80026e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026ee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f2:	fa93 f3a3 	rbit	r3, r3
 80026f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80026f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80026fa:	fab3 f383 	clz	r3, r3
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	461a      	mov	r2, r3
 8002702:	4b26      	ldr	r3, [pc, #152]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002704:	4413      	add	r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	461a      	mov	r2, r3
 800270a:	2301      	movs	r3, #1
 800270c:	6013      	str	r3, [r2, #0]
 800270e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002712:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002716:	fa93 f3a3 	rbit	r3, r3
 800271a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800271c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800271e:	fab3 f383 	clz	r3, r3
 8002722:	b2db      	uxtb	r3, r3
 8002724:	461a      	mov	r2, r3
 8002726:	4b1d      	ldr	r3, [pc, #116]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002728:	4413      	add	r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	461a      	mov	r2, r3
 800272e:	2300      	movs	r3, #0
 8002730:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002732:	4a18      	ldr	r2, [pc, #96]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002736:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	2b00      	cmp	r3, #0
 8002740:	d04b      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002742:	f7fe f829 	bl	8000798 <HAL_GetTick>
 8002746:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002748:	e00a      	b.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800274a:	f7fe f825 	bl	8000798 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	f241 3288 	movw	r2, #5000	; 0x1388
 8002758:	4293      	cmp	r3, r2
 800275a:	d901      	bls.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e113      	b.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002760:	2302      	movs	r3, #2
 8002762:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002766:	fa93 f3a3 	rbit	r3, r3
 800276a:	627b      	str	r3, [r7, #36]	; 0x24
 800276c:	2302      	movs	r3, #2
 800276e:	623b      	str	r3, [r7, #32]
 8002770:	6a3b      	ldr	r3, [r7, #32]
 8002772:	fa93 f3a3 	rbit	r3, r3
 8002776:	61fb      	str	r3, [r7, #28]
  return result;
 8002778:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800277a:	fab3 f383 	clz	r3, r3
 800277e:	b2db      	uxtb	r3, r3
 8002780:	095b      	lsrs	r3, r3, #5
 8002782:	b2db      	uxtb	r3, r3
 8002784:	f043 0302 	orr.w	r3, r3, #2
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d108      	bne.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800278e:	4b01      	ldr	r3, [pc, #4]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002790:	6a1b      	ldr	r3, [r3, #32]
 8002792:	e00d      	b.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002794:	40021000 	.word	0x40021000
 8002798:	40007000 	.word	0x40007000
 800279c:	10908100 	.word	0x10908100
 80027a0:	2302      	movs	r3, #2
 80027a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	fa93 f3a3 	rbit	r3, r3
 80027aa:	617b      	str	r3, [r7, #20]
 80027ac:	4b78      	ldr	r3, [pc, #480]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b0:	2202      	movs	r2, #2
 80027b2:	613a      	str	r2, [r7, #16]
 80027b4:	693a      	ldr	r2, [r7, #16]
 80027b6:	fa92 f2a2 	rbit	r2, r2
 80027ba:	60fa      	str	r2, [r7, #12]
  return result;
 80027bc:	68fa      	ldr	r2, [r7, #12]
 80027be:	fab2 f282 	clz	r2, r2
 80027c2:	b2d2      	uxtb	r2, r2
 80027c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027c8:	b2d2      	uxtb	r2, r2
 80027ca:	f002 021f 	and.w	r2, r2, #31
 80027ce:	2101      	movs	r1, #1
 80027d0:	fa01 f202 	lsl.w	r2, r1, r2
 80027d4:	4013      	ands	r3, r2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d0b7      	beq.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80027da:	4b6d      	ldr	r3, [pc, #436]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027dc:	6a1b      	ldr	r3, [r3, #32]
 80027de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	496a      	ldr	r1, [pc, #424]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80027ec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d105      	bne.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027f4:	4b66      	ldr	r3, [pc, #408]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027f6:	69db      	ldr	r3, [r3, #28]
 80027f8:	4a65      	ldr	r2, [pc, #404]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027fe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0301 	and.w	r3, r3, #1
 8002808:	2b00      	cmp	r3, #0
 800280a:	d008      	beq.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800280c:	4b60      	ldr	r3, [pc, #384]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800280e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002810:	f023 0203 	bic.w	r2, r3, #3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	495d      	ldr	r1, [pc, #372]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800281a:	4313      	orrs	r3, r2
 800281c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d008      	beq.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800282a:	4b59      	ldr	r3, [pc, #356]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800282c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	4956      	ldr	r1, [pc, #344]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002838:	4313      	orrs	r3, r2
 800283a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0304 	and.w	r3, r3, #4
 8002844:	2b00      	cmp	r3, #0
 8002846:	d008      	beq.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002848:	4b51      	ldr	r3, [pc, #324]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800284a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	494e      	ldr	r1, [pc, #312]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002856:	4313      	orrs	r3, r2
 8002858:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0320 	and.w	r3, r3, #32
 8002862:	2b00      	cmp	r3, #0
 8002864:	d008      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002866:	4b4a      	ldr	r3, [pc, #296]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286a:	f023 0210 	bic.w	r2, r3, #16
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	69db      	ldr	r3, [r3, #28]
 8002872:	4947      	ldr	r1, [pc, #284]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002874:	4313      	orrs	r3, r2
 8002876:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d008      	beq.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002884:	4b42      	ldr	r3, [pc, #264]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002890:	493f      	ldr	r1, [pc, #252]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002892:	4313      	orrs	r3, r2
 8002894:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d008      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80028a2:	4b3b      	ldr	r3, [pc, #236]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80028a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a6:	f023 0220 	bic.w	r2, r3, #32
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	4938      	ldr	r1, [pc, #224]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0308 	and.w	r3, r3, #8
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d008      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80028c0:	4b33      	ldr	r3, [pc, #204]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80028c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	695b      	ldr	r3, [r3, #20]
 80028cc:	4930      	ldr	r1, [pc, #192]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0310 	and.w	r3, r3, #16
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d008      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80028de:	4b2c      	ldr	r3, [pc, #176]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80028e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	4929      	ldr	r1, [pc, #164]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d008      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80028fc:	4b24      	ldr	r3, [pc, #144]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002908:	4921      	ldr	r1, [pc, #132]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800290a:	4313      	orrs	r3, r2
 800290c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002916:	2b00      	cmp	r3, #0
 8002918:	d008      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800291a:	4b1d      	ldr	r3, [pc, #116]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800291c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002926:	491a      	ldr	r1, [pc, #104]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002928:	4313      	orrs	r3, r2
 800292a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002934:	2b00      	cmp	r3, #0
 8002936:	d008      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002938:	4b15      	ldr	r3, [pc, #84]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800293a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002944:	4912      	ldr	r1, [pc, #72]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002946:	4313      	orrs	r3, r2
 8002948:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d008      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002956:	4b0e      	ldr	r3, [pc, #56]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002962:	490b      	ldr	r1, [pc, #44]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002964:	4313      	orrs	r3, r2
 8002966:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d008      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002974:	4b06      	ldr	r3, [pc, #24]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002978:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002980:	4903      	ldr	r1, [pc, #12]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002982:	4313      	orrs	r3, r2
 8002984:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002986:	2300      	movs	r3, #0
}
 8002988:	4618      	mov	r0, r3
 800298a:	3748      	adds	r7, #72	; 0x48
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	40021000 	.word	0x40021000

08002994 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d101      	bne.n	80029a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e040      	b.n	8002a28 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d106      	bne.n	80029bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f7fd fda4 	bl	8000504 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2224      	movs	r2, #36	; 0x24
 80029c0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 0201 	bic.w	r2, r2, #1
 80029d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 fc16 	bl	8003204 <UART_SetConfig>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d101      	bne.n	80029e2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e022      	b.n	8002a28 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d002      	beq.n	80029f0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 fde0 	bl	80035b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	685a      	ldr	r2, [r3, #4]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	689a      	ldr	r2, [r3, #8]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f042 0201 	orr.w	r2, r2, #1
 8002a1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f000 fe67 	bl	80036f4 <UART_CheckIdleState>
 8002a26:	4603      	mov	r3, r0
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3708      	adds	r7, #8
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b08a      	sub	sp, #40	; 0x28
 8002a34:	af02      	add	r7, sp, #8
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	603b      	str	r3, [r7, #0]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a44:	2b20      	cmp	r3, #32
 8002a46:	f040 8082 	bne.w	8002b4e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d002      	beq.n	8002a56 <HAL_UART_Transmit+0x26>
 8002a50:	88fb      	ldrh	r3, [r7, #6]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e07a      	b.n	8002b50 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d101      	bne.n	8002a68 <HAL_UART_Transmit+0x38>
 8002a64:	2302      	movs	r3, #2
 8002a66:	e073      	b.n	8002b50 <HAL_UART_Transmit+0x120>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2221      	movs	r2, #33	; 0x21
 8002a7c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a7e:	f7fd fe8b 	bl	8000798 <HAL_GetTick>
 8002a82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	88fa      	ldrh	r2, [r7, #6]
 8002a88:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	88fa      	ldrh	r2, [r7, #6]
 8002a90:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a9c:	d108      	bne.n	8002ab0 <HAL_UART_Transmit+0x80>
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d104      	bne.n	8002ab0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	61bb      	str	r3, [r7, #24]
 8002aae:	e003      	b.n	8002ab8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002ac0:	e02d      	b.n	8002b1e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	9300      	str	r3, [sp, #0]
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	2180      	movs	r1, #128	; 0x80
 8002acc:	68f8      	ldr	r0, [r7, #12]
 8002ace:	f000 fe5a 	bl	8003786 <UART_WaitOnFlagUntilTimeout>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d001      	beq.n	8002adc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e039      	b.n	8002b50 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d10b      	bne.n	8002afa <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	881a      	ldrh	r2, [r3, #0]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002aee:	b292      	uxth	r2, r2
 8002af0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	3302      	adds	r3, #2
 8002af6:	61bb      	str	r3, [r7, #24]
 8002af8:	e008      	b.n	8002b0c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	781a      	ldrb	r2, [r3, #0]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	b292      	uxth	r2, r2
 8002b04:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	3301      	adds	r3, #1
 8002b0a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	3b01      	subs	r3, #1
 8002b16:	b29a      	uxth	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1cb      	bne.n	8002ac2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	9300      	str	r3, [sp, #0]
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	2200      	movs	r2, #0
 8002b32:	2140      	movs	r1, #64	; 0x40
 8002b34:	68f8      	ldr	r0, [r7, #12]
 8002b36:	f000 fe26 	bl	8003786 <UART_WaitOnFlagUntilTimeout>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d001      	beq.n	8002b44 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e005      	b.n	8002b50 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2220      	movs	r2, #32
 8002b48:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	e000      	b.n	8002b50 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002b4e:	2302      	movs	r3, #2
  }
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3720      	adds	r7, #32
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b08a      	sub	sp, #40	; 0x28
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	4613      	mov	r3, r2
 8002b64:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b6a:	2b20      	cmp	r3, #32
 8002b6c:	d13d      	bne.n	8002bea <HAL_UART_Receive_DMA+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d002      	beq.n	8002b7a <HAL_UART_Receive_DMA+0x22>
 8002b74:	88fb      	ldrh	r3, [r7, #6]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e036      	b.n	8002bec <HAL_UART_Receive_DMA+0x94>
    }

    __HAL_LOCK(huart);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d101      	bne.n	8002b8c <HAL_UART_Receive_DMA+0x34>
 8002b88:	2302      	movs	r3, #2
 8002b8a:	e02f      	b.n	8002bec <HAL_UART_Receive_DMA+0x94>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2200      	movs	r2, #0
 8002b98:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d018      	beq.n	8002bda <HAL_UART_Receive_DMA+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	e853 3f00 	ldrex	r3, [r3]
 8002bb4:	613b      	str	r3, [r7, #16]
   return(result);
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002bbc:	627b      	str	r3, [r7, #36]	; 0x24
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc6:	623b      	str	r3, [r7, #32]
 8002bc8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bca:	69f9      	ldr	r1, [r7, #28]
 8002bcc:	6a3a      	ldr	r2, [r7, #32]
 8002bce:	e841 2300 	strex	r3, r2, [r1]
 8002bd2:	61bb      	str	r3, [r7, #24]
   return(result);
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1e6      	bne.n	8002ba8 <HAL_UART_Receive_DMA+0x50>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002bda:	88fb      	ldrh	r3, [r7, #6]
 8002bdc:	461a      	mov	r2, r3
 8002bde:	68b9      	ldr	r1, [r7, #8]
 8002be0:	68f8      	ldr	r0, [r7, #12]
 8002be2:	f000 fe95 	bl	8003910 <UART_Start_Receive_DMA>
 8002be6:	4603      	mov	r3, r0
 8002be8:	e000      	b.n	8002bec <HAL_UART_Receive_DMA+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002bea:	2302      	movs	r3, #2
  }
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3728      	adds	r7, #40	; 0x28
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b0ba      	sub	sp, #232	; 0xe8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	69db      	ldr	r3, [r3, #28]
 8002c02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002c1a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002c1e:	f640 030f 	movw	r3, #2063	; 0x80f
 8002c22:	4013      	ands	r3, r2
 8002c24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002c28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d115      	bne.n	8002c5c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002c30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c34:	f003 0320 	and.w	r3, r3, #32
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d00f      	beq.n	8002c5c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c40:	f003 0320 	and.w	r3, r3, #32
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d009      	beq.n	8002c5c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	f000 82a3 	beq.w	8003198 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	4798      	blx	r3
      }
      return;
 8002c5a:	e29d      	b.n	8003198 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002c5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	f000 8117 	beq.w	8002e94 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002c66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d106      	bne.n	8002c80 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002c72:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002c76:	4b85      	ldr	r3, [pc, #532]	; (8002e8c <HAL_UART_IRQHandler+0x298>)
 8002c78:	4013      	ands	r3, r2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	f000 810a 	beq.w	8002e94 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002c80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c84:	f003 0301 	and.w	r3, r3, #1
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d011      	beq.n	8002cb0 <HAL_UART_IRQHandler+0xbc>
 8002c8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d00b      	beq.n	8002cb0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ca6:	f043 0201 	orr.w	r2, r3, #1
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002cb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d011      	beq.n	8002ce0 <HAL_UART_IRQHandler+0xec>
 8002cbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002cc0:	f003 0301 	and.w	r3, r3, #1
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d00b      	beq.n	8002ce0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2202      	movs	r2, #2
 8002cce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cd6:	f043 0204 	orr.w	r2, r3, #4
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ce0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ce4:	f003 0304 	and.w	r3, r3, #4
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d011      	beq.n	8002d10 <HAL_UART_IRQHandler+0x11c>
 8002cec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00b      	beq.n	8002d10 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2204      	movs	r2, #4
 8002cfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d06:	f043 0202 	orr.w	r2, r3, #2
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002d10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d14:	f003 0308 	and.w	r3, r3, #8
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d017      	beq.n	8002d4c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002d1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d20:	f003 0320 	and.w	r3, r3, #32
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d105      	bne.n	8002d34 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002d28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d2c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00b      	beq.n	8002d4c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2208      	movs	r2, #8
 8002d3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d42:	f043 0208 	orr.w	r2, r3, #8
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002d4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d012      	beq.n	8002d7e <HAL_UART_IRQHandler+0x18a>
 8002d58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d00c      	beq.n	8002d7e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d74:	f043 0220 	orr.w	r2, r3, #32
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	f000 8209 	beq.w	800319c <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d8e:	f003 0320 	and.w	r3, r3, #32
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d00d      	beq.n	8002db2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002d96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d9a:	f003 0320 	and.w	r3, r3, #32
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d007      	beq.n	8002db2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d003      	beq.n	8002db2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002db8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc6:	2b40      	cmp	r3, #64	; 0x40
 8002dc8:	d005      	beq.n	8002dd6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002dca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002dce:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d04f      	beq.n	8002e76 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 fe62 	bl	8003aa0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de6:	2b40      	cmp	r3, #64	; 0x40
 8002de8:	d141      	bne.n	8002e6e <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	3308      	adds	r3, #8
 8002df0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002df4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002df8:	e853 3f00 	ldrex	r3, [r3]
 8002dfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002e00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	3308      	adds	r3, #8
 8002e12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002e16:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002e1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002e22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002e26:	e841 2300 	strex	r3, r2, [r1]
 8002e2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002e2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1d9      	bne.n	8002dea <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d013      	beq.n	8002e66 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e42:	4a13      	ldr	r2, [pc, #76]	; (8002e90 <HAL_UART_IRQHandler+0x29c>)
 8002e44:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7fd fea0 	bl	8000b90 <HAL_DMA_Abort_IT>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d017      	beq.n	8002e86 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8002e60:	4610      	mov	r0, r2
 8002e62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e64:	e00f      	b.n	8002e86 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 f9b6 	bl	80031d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e6c:	e00b      	b.n	8002e86 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 f9b2 	bl	80031d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e74:	e007      	b.n	8002e86 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 f9ae 	bl	80031d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8002e84:	e18a      	b.n	800319c <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e86:	bf00      	nop
    return;
 8002e88:	e188      	b.n	800319c <HAL_UART_IRQHandler+0x5a8>
 8002e8a:	bf00      	nop
 8002e8c:	04000120 	.word	0x04000120
 8002e90:	08003d39 	.word	0x08003d39

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	f040 8143 	bne.w	8003124 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ea2:	f003 0310 	and.w	r3, r3, #16
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	f000 813c 	beq.w	8003124 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002eac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002eb0:	f003 0310 	and.w	r3, r3, #16
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	f000 8135 	beq.w	8003124 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	2210      	movs	r2, #16
 8002ec0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ecc:	2b40      	cmp	r3, #64	; 0x40
 8002ece:	f040 80b1 	bne.w	8003034 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002ede:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	f000 815c 	beq.w	80031a0 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002eee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	f080 8154 	bcs.w	80031a0 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002efe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	2b20      	cmp	r3, #32
 8002f0a:	f000 8085 	beq.w	8003018 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f16:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f1a:	e853 3f00 	ldrex	r3, [r3]
 8002f1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002f22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f2a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	461a      	mov	r2, r3
 8002f34:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002f38:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002f3c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f40:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002f44:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002f48:	e841 2300 	strex	r3, r2, [r1]
 8002f4c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002f50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1da      	bne.n	8002f0e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	3308      	adds	r3, #8
 8002f5e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f62:	e853 3f00 	ldrex	r3, [r3]
 8002f66:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002f68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f6a:	f023 0301 	bic.w	r3, r3, #1
 8002f6e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	3308      	adds	r3, #8
 8002f78:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f7c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002f80:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f82:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002f84:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002f88:	e841 2300 	strex	r3, r2, [r1]
 8002f8c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002f8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d1e1      	bne.n	8002f58 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	3308      	adds	r3, #8
 8002f9a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f9e:	e853 3f00 	ldrex	r3, [r3]
 8002fa2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002fa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fa6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002faa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	3308      	adds	r3, #8
 8002fb4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002fb8:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002fba:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fbc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002fbe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002fc0:	e841 2300 	strex	r3, r2, [r1]
 8002fc4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002fc6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d1e3      	bne.n	8002f94 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2220      	movs	r2, #32
 8002fd0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fe0:	e853 3f00 	ldrex	r3, [r3]
 8002fe4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002fe6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fe8:	f023 0310 	bic.w	r3, r3, #16
 8002fec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ffa:	65bb      	str	r3, [r7, #88]	; 0x58
 8002ffc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ffe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003000:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003002:	e841 2300 	strex	r3, r2, [r1]
 8003006:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003008:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800300a:	2b00      	cmp	r3, #0
 800300c:	d1e4      	bne.n	8002fd8 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003012:	4618      	mov	r0, r3
 8003014:	f7fd fd83 	bl	8000b1e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003024:	b29b      	uxth	r3, r3
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	b29b      	uxth	r3, r3
 800302a:	4619      	mov	r1, r3
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 f8dd 	bl	80031ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003032:	e0b5      	b.n	80031a0 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003040:	b29b      	uxth	r3, r3
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800304e:	b29b      	uxth	r3, r3
 8003050:	2b00      	cmp	r3, #0
 8003052:	f000 80a7 	beq.w	80031a4 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8003056:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800305a:	2b00      	cmp	r3, #0
 800305c:	f000 80a2 	beq.w	80031a4 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003068:	e853 3f00 	ldrex	r3, [r3]
 800306c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800306e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003070:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003074:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	461a      	mov	r2, r3
 800307e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003082:	647b      	str	r3, [r7, #68]	; 0x44
 8003084:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003086:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003088:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800308a:	e841 2300 	strex	r3, r2, [r1]
 800308e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003092:	2b00      	cmp	r3, #0
 8003094:	d1e4      	bne.n	8003060 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	3308      	adds	r3, #8
 800309c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800309e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a0:	e853 3f00 	ldrex	r3, [r3]
 80030a4:	623b      	str	r3, [r7, #32]
   return(result);
 80030a6:	6a3b      	ldr	r3, [r7, #32]
 80030a8:	f023 0301 	bic.w	r3, r3, #1
 80030ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	3308      	adds	r3, #8
 80030b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80030ba:	633a      	str	r2, [r7, #48]	; 0x30
 80030bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80030c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030c2:	e841 2300 	strex	r3, r2, [r1]
 80030c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80030c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1e3      	bne.n	8003096 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2220      	movs	r2, #32
 80030d2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	e853 3f00 	ldrex	r3, [r3]
 80030ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f023 0310 	bic.w	r3, r3, #16
 80030f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	461a      	mov	r2, r3
 80030fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003102:	61fb      	str	r3, [r7, #28]
 8003104:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003106:	69b9      	ldr	r1, [r7, #24]
 8003108:	69fa      	ldr	r2, [r7, #28]
 800310a:	e841 2300 	strex	r3, r2, [r1]
 800310e:	617b      	str	r3, [r7, #20]
   return(result);
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1e4      	bne.n	80030e0 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003116:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800311a:	4619      	mov	r1, r3
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f000 f865 	bl	80031ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003122:	e03f      	b.n	80031a4 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003128:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00e      	beq.n	800314e <HAL_UART_IRQHandler+0x55a>
 8003130:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003134:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d008      	beq.n	800314e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003144:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 fe36 	bl	8003db8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800314c:	e02d      	b.n	80031aa <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800314e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00e      	beq.n	8003178 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800315a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800315e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003162:	2b00      	cmp	r3, #0
 8003164:	d008      	beq.n	8003178 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800316a:	2b00      	cmp	r3, #0
 800316c:	d01c      	beq.n	80031a8 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	4798      	blx	r3
    }
    return;
 8003176:	e017      	b.n	80031a8 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800317c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003180:	2b00      	cmp	r3, #0
 8003182:	d012      	beq.n	80031aa <HAL_UART_IRQHandler+0x5b6>
 8003184:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00c      	beq.n	80031aa <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f000 fde7 	bl	8003d64 <UART_EndTransmit_IT>
    return;
 8003196:	e008      	b.n	80031aa <HAL_UART_IRQHandler+0x5b6>
      return;
 8003198:	bf00      	nop
 800319a:	e006      	b.n	80031aa <HAL_UART_IRQHandler+0x5b6>
    return;
 800319c:	bf00      	nop
 800319e:	e004      	b.n	80031aa <HAL_UART_IRQHandler+0x5b6>
      return;
 80031a0:	bf00      	nop
 80031a2:	e002      	b.n	80031aa <HAL_UART_IRQHandler+0x5b6>
      return;
 80031a4:	bf00      	nop
 80031a6:	e000      	b.n	80031aa <HAL_UART_IRQHandler+0x5b6>
    return;
 80031a8:	bf00      	nop
  }

}
 80031aa:	37e8      	adds	r7, #232	; 0xe8
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80031b8:	bf00      	nop
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80031cc:	bf00      	nop
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80031e0:	bf00      	nop
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	460b      	mov	r3, r1
 80031f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b088      	sub	sp, #32
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800320c:	2300      	movs	r3, #0
 800320e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689a      	ldr	r2, [r3, #8]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	431a      	orrs	r2, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	431a      	orrs	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	69db      	ldr	r3, [r3, #28]
 8003224:	4313      	orrs	r3, r2
 8003226:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003232:	f023 030c 	bic.w	r3, r3, #12
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	6812      	ldr	r2, [r2, #0]
 800323a:	6979      	ldr	r1, [r7, #20]
 800323c:	430b      	orrs	r3, r1
 800323e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	68da      	ldr	r2, [r3, #12]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	430a      	orrs	r2, r1
 8003254:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a1b      	ldr	r3, [r3, #32]
 8003260:	697a      	ldr	r2, [r7, #20]
 8003262:	4313      	orrs	r3, r2
 8003264:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	697a      	ldr	r2, [r7, #20]
 8003276:	430a      	orrs	r2, r1
 8003278:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4aa8      	ldr	r2, [pc, #672]	; (8003520 <UART_SetConfig+0x31c>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d120      	bne.n	80032c6 <UART_SetConfig+0xc2>
 8003284:	4ba7      	ldr	r3, [pc, #668]	; (8003524 <UART_SetConfig+0x320>)
 8003286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003288:	f003 0303 	and.w	r3, r3, #3
 800328c:	2b03      	cmp	r3, #3
 800328e:	d817      	bhi.n	80032c0 <UART_SetConfig+0xbc>
 8003290:	a201      	add	r2, pc, #4	; (adr r2, 8003298 <UART_SetConfig+0x94>)
 8003292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003296:	bf00      	nop
 8003298:	080032a9 	.word	0x080032a9
 800329c:	080032b5 	.word	0x080032b5
 80032a0:	080032bb 	.word	0x080032bb
 80032a4:	080032af 	.word	0x080032af
 80032a8:	2301      	movs	r3, #1
 80032aa:	77fb      	strb	r3, [r7, #31]
 80032ac:	e0b5      	b.n	800341a <UART_SetConfig+0x216>
 80032ae:	2302      	movs	r3, #2
 80032b0:	77fb      	strb	r3, [r7, #31]
 80032b2:	e0b2      	b.n	800341a <UART_SetConfig+0x216>
 80032b4:	2304      	movs	r3, #4
 80032b6:	77fb      	strb	r3, [r7, #31]
 80032b8:	e0af      	b.n	800341a <UART_SetConfig+0x216>
 80032ba:	2308      	movs	r3, #8
 80032bc:	77fb      	strb	r3, [r7, #31]
 80032be:	e0ac      	b.n	800341a <UART_SetConfig+0x216>
 80032c0:	2310      	movs	r3, #16
 80032c2:	77fb      	strb	r3, [r7, #31]
 80032c4:	e0a9      	b.n	800341a <UART_SetConfig+0x216>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a97      	ldr	r2, [pc, #604]	; (8003528 <UART_SetConfig+0x324>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d124      	bne.n	800331a <UART_SetConfig+0x116>
 80032d0:	4b94      	ldr	r3, [pc, #592]	; (8003524 <UART_SetConfig+0x320>)
 80032d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032d8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80032dc:	d011      	beq.n	8003302 <UART_SetConfig+0xfe>
 80032de:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80032e2:	d817      	bhi.n	8003314 <UART_SetConfig+0x110>
 80032e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032e8:	d011      	beq.n	800330e <UART_SetConfig+0x10a>
 80032ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032ee:	d811      	bhi.n	8003314 <UART_SetConfig+0x110>
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d003      	beq.n	80032fc <UART_SetConfig+0xf8>
 80032f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032f8:	d006      	beq.n	8003308 <UART_SetConfig+0x104>
 80032fa:	e00b      	b.n	8003314 <UART_SetConfig+0x110>
 80032fc:	2300      	movs	r3, #0
 80032fe:	77fb      	strb	r3, [r7, #31]
 8003300:	e08b      	b.n	800341a <UART_SetConfig+0x216>
 8003302:	2302      	movs	r3, #2
 8003304:	77fb      	strb	r3, [r7, #31]
 8003306:	e088      	b.n	800341a <UART_SetConfig+0x216>
 8003308:	2304      	movs	r3, #4
 800330a:	77fb      	strb	r3, [r7, #31]
 800330c:	e085      	b.n	800341a <UART_SetConfig+0x216>
 800330e:	2308      	movs	r3, #8
 8003310:	77fb      	strb	r3, [r7, #31]
 8003312:	e082      	b.n	800341a <UART_SetConfig+0x216>
 8003314:	2310      	movs	r3, #16
 8003316:	77fb      	strb	r3, [r7, #31]
 8003318:	e07f      	b.n	800341a <UART_SetConfig+0x216>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a83      	ldr	r2, [pc, #524]	; (800352c <UART_SetConfig+0x328>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d124      	bne.n	800336e <UART_SetConfig+0x16a>
 8003324:	4b7f      	ldr	r3, [pc, #508]	; (8003524 <UART_SetConfig+0x320>)
 8003326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003328:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800332c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003330:	d011      	beq.n	8003356 <UART_SetConfig+0x152>
 8003332:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003336:	d817      	bhi.n	8003368 <UART_SetConfig+0x164>
 8003338:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800333c:	d011      	beq.n	8003362 <UART_SetConfig+0x15e>
 800333e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003342:	d811      	bhi.n	8003368 <UART_SetConfig+0x164>
 8003344:	2b00      	cmp	r3, #0
 8003346:	d003      	beq.n	8003350 <UART_SetConfig+0x14c>
 8003348:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800334c:	d006      	beq.n	800335c <UART_SetConfig+0x158>
 800334e:	e00b      	b.n	8003368 <UART_SetConfig+0x164>
 8003350:	2300      	movs	r3, #0
 8003352:	77fb      	strb	r3, [r7, #31]
 8003354:	e061      	b.n	800341a <UART_SetConfig+0x216>
 8003356:	2302      	movs	r3, #2
 8003358:	77fb      	strb	r3, [r7, #31]
 800335a:	e05e      	b.n	800341a <UART_SetConfig+0x216>
 800335c:	2304      	movs	r3, #4
 800335e:	77fb      	strb	r3, [r7, #31]
 8003360:	e05b      	b.n	800341a <UART_SetConfig+0x216>
 8003362:	2308      	movs	r3, #8
 8003364:	77fb      	strb	r3, [r7, #31]
 8003366:	e058      	b.n	800341a <UART_SetConfig+0x216>
 8003368:	2310      	movs	r3, #16
 800336a:	77fb      	strb	r3, [r7, #31]
 800336c:	e055      	b.n	800341a <UART_SetConfig+0x216>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a6f      	ldr	r2, [pc, #444]	; (8003530 <UART_SetConfig+0x32c>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d124      	bne.n	80033c2 <UART_SetConfig+0x1be>
 8003378:	4b6a      	ldr	r3, [pc, #424]	; (8003524 <UART_SetConfig+0x320>)
 800337a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003380:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003384:	d011      	beq.n	80033aa <UART_SetConfig+0x1a6>
 8003386:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800338a:	d817      	bhi.n	80033bc <UART_SetConfig+0x1b8>
 800338c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003390:	d011      	beq.n	80033b6 <UART_SetConfig+0x1b2>
 8003392:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003396:	d811      	bhi.n	80033bc <UART_SetConfig+0x1b8>
 8003398:	2b00      	cmp	r3, #0
 800339a:	d003      	beq.n	80033a4 <UART_SetConfig+0x1a0>
 800339c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033a0:	d006      	beq.n	80033b0 <UART_SetConfig+0x1ac>
 80033a2:	e00b      	b.n	80033bc <UART_SetConfig+0x1b8>
 80033a4:	2300      	movs	r3, #0
 80033a6:	77fb      	strb	r3, [r7, #31]
 80033a8:	e037      	b.n	800341a <UART_SetConfig+0x216>
 80033aa:	2302      	movs	r3, #2
 80033ac:	77fb      	strb	r3, [r7, #31]
 80033ae:	e034      	b.n	800341a <UART_SetConfig+0x216>
 80033b0:	2304      	movs	r3, #4
 80033b2:	77fb      	strb	r3, [r7, #31]
 80033b4:	e031      	b.n	800341a <UART_SetConfig+0x216>
 80033b6:	2308      	movs	r3, #8
 80033b8:	77fb      	strb	r3, [r7, #31]
 80033ba:	e02e      	b.n	800341a <UART_SetConfig+0x216>
 80033bc:	2310      	movs	r3, #16
 80033be:	77fb      	strb	r3, [r7, #31]
 80033c0:	e02b      	b.n	800341a <UART_SetConfig+0x216>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a5b      	ldr	r2, [pc, #364]	; (8003534 <UART_SetConfig+0x330>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d124      	bne.n	8003416 <UART_SetConfig+0x212>
 80033cc:	4b55      	ldr	r3, [pc, #340]	; (8003524 <UART_SetConfig+0x320>)
 80033ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80033d4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80033d8:	d011      	beq.n	80033fe <UART_SetConfig+0x1fa>
 80033da:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80033de:	d817      	bhi.n	8003410 <UART_SetConfig+0x20c>
 80033e0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80033e4:	d011      	beq.n	800340a <UART_SetConfig+0x206>
 80033e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80033ea:	d811      	bhi.n	8003410 <UART_SetConfig+0x20c>
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d003      	beq.n	80033f8 <UART_SetConfig+0x1f4>
 80033f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033f4:	d006      	beq.n	8003404 <UART_SetConfig+0x200>
 80033f6:	e00b      	b.n	8003410 <UART_SetConfig+0x20c>
 80033f8:	2300      	movs	r3, #0
 80033fa:	77fb      	strb	r3, [r7, #31]
 80033fc:	e00d      	b.n	800341a <UART_SetConfig+0x216>
 80033fe:	2302      	movs	r3, #2
 8003400:	77fb      	strb	r3, [r7, #31]
 8003402:	e00a      	b.n	800341a <UART_SetConfig+0x216>
 8003404:	2304      	movs	r3, #4
 8003406:	77fb      	strb	r3, [r7, #31]
 8003408:	e007      	b.n	800341a <UART_SetConfig+0x216>
 800340a:	2308      	movs	r3, #8
 800340c:	77fb      	strb	r3, [r7, #31]
 800340e:	e004      	b.n	800341a <UART_SetConfig+0x216>
 8003410:	2310      	movs	r3, #16
 8003412:	77fb      	strb	r3, [r7, #31]
 8003414:	e001      	b.n	800341a <UART_SetConfig+0x216>
 8003416:	2310      	movs	r3, #16
 8003418:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	69db      	ldr	r3, [r3, #28]
 800341e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003422:	d15c      	bne.n	80034de <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 8003424:	7ffb      	ldrb	r3, [r7, #31]
 8003426:	2b08      	cmp	r3, #8
 8003428:	d827      	bhi.n	800347a <UART_SetConfig+0x276>
 800342a:	a201      	add	r2, pc, #4	; (adr r2, 8003430 <UART_SetConfig+0x22c>)
 800342c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003430:	08003455 	.word	0x08003455
 8003434:	0800345d 	.word	0x0800345d
 8003438:	08003465 	.word	0x08003465
 800343c:	0800347b 	.word	0x0800347b
 8003440:	0800346b 	.word	0x0800346b
 8003444:	0800347b 	.word	0x0800347b
 8003448:	0800347b 	.word	0x0800347b
 800344c:	0800347b 	.word	0x0800347b
 8003450:	08003473 	.word	0x08003473
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003454:	f7ff f8aa 	bl	80025ac <HAL_RCC_GetPCLK1Freq>
 8003458:	61b8      	str	r0, [r7, #24]
        break;
 800345a:	e013      	b.n	8003484 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800345c:	f7ff f8c8 	bl	80025f0 <HAL_RCC_GetPCLK2Freq>
 8003460:	61b8      	str	r0, [r7, #24]
        break;
 8003462:	e00f      	b.n	8003484 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003464:	4b34      	ldr	r3, [pc, #208]	; (8003538 <UART_SetConfig+0x334>)
 8003466:	61bb      	str	r3, [r7, #24]
        break;
 8003468:	e00c      	b.n	8003484 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800346a:	f7ff f829 	bl	80024c0 <HAL_RCC_GetSysClockFreq>
 800346e:	61b8      	str	r0, [r7, #24]
        break;
 8003470:	e008      	b.n	8003484 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003472:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003476:	61bb      	str	r3, [r7, #24]
        break;
 8003478:	e004      	b.n	8003484 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800347a:	2300      	movs	r3, #0
 800347c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	77bb      	strb	r3, [r7, #30]
        break;
 8003482:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	2b00      	cmp	r3, #0
 8003488:	f000 8084 	beq.w	8003594 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	005a      	lsls	r2, r3, #1
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	085b      	lsrs	r3, r3, #1
 8003496:	441a      	add	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	2b0f      	cmp	r3, #15
 80034a8:	d916      	bls.n	80034d8 <UART_SetConfig+0x2d4>
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034b0:	d212      	bcs.n	80034d8 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	f023 030f 	bic.w	r3, r3, #15
 80034ba:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	085b      	lsrs	r3, r3, #1
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	f003 0307 	and.w	r3, r3, #7
 80034c6:	b29a      	uxth	r2, r3
 80034c8:	89fb      	ldrh	r3, [r7, #14]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	89fa      	ldrh	r2, [r7, #14]
 80034d4:	60da      	str	r2, [r3, #12]
 80034d6:	e05d      	b.n	8003594 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	77bb      	strb	r3, [r7, #30]
 80034dc:	e05a      	b.n	8003594 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 80034de:	7ffb      	ldrb	r3, [r7, #31]
 80034e0:	2b08      	cmp	r3, #8
 80034e2:	d836      	bhi.n	8003552 <UART_SetConfig+0x34e>
 80034e4:	a201      	add	r2, pc, #4	; (adr r2, 80034ec <UART_SetConfig+0x2e8>)
 80034e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ea:	bf00      	nop
 80034ec:	08003511 	.word	0x08003511
 80034f0:	08003519 	.word	0x08003519
 80034f4:	0800353d 	.word	0x0800353d
 80034f8:	08003553 	.word	0x08003553
 80034fc:	08003543 	.word	0x08003543
 8003500:	08003553 	.word	0x08003553
 8003504:	08003553 	.word	0x08003553
 8003508:	08003553 	.word	0x08003553
 800350c:	0800354b 	.word	0x0800354b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003510:	f7ff f84c 	bl	80025ac <HAL_RCC_GetPCLK1Freq>
 8003514:	61b8      	str	r0, [r7, #24]
        break;
 8003516:	e021      	b.n	800355c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003518:	f7ff f86a 	bl	80025f0 <HAL_RCC_GetPCLK2Freq>
 800351c:	61b8      	str	r0, [r7, #24]
        break;
 800351e:	e01d      	b.n	800355c <UART_SetConfig+0x358>
 8003520:	40013800 	.word	0x40013800
 8003524:	40021000 	.word	0x40021000
 8003528:	40004400 	.word	0x40004400
 800352c:	40004800 	.word	0x40004800
 8003530:	40004c00 	.word	0x40004c00
 8003534:	40005000 	.word	0x40005000
 8003538:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800353c:	4b1b      	ldr	r3, [pc, #108]	; (80035ac <UART_SetConfig+0x3a8>)
 800353e:	61bb      	str	r3, [r7, #24]
        break;
 8003540:	e00c      	b.n	800355c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003542:	f7fe ffbd 	bl	80024c0 <HAL_RCC_GetSysClockFreq>
 8003546:	61b8      	str	r0, [r7, #24]
        break;
 8003548:	e008      	b.n	800355c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800354a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800354e:	61bb      	str	r3, [r7, #24]
        break;
 8003550:	e004      	b.n	800355c <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8003552:	2300      	movs	r3, #0
 8003554:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	77bb      	strb	r3, [r7, #30]
        break;
 800355a:	bf00      	nop
    }

    if (pclk != 0U)
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d018      	beq.n	8003594 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	085a      	lsrs	r2, r3, #1
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	441a      	add	r2, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	fbb2 f3f3 	udiv	r3, r2, r3
 8003574:	b29b      	uxth	r3, r3
 8003576:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	2b0f      	cmp	r3, #15
 800357c:	d908      	bls.n	8003590 <UART_SetConfig+0x38c>
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003584:	d204      	bcs.n	8003590 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	60da      	str	r2, [r3, #12]
 800358e:	e001      	b.n	8003594 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80035a0:	7fbb      	ldrb	r3, [r7, #30]
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3720      	adds	r7, #32
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	007a1200 	.word	0x007a1200

080035b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035bc:	f003 0301 	and.w	r3, r3, #1
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00a      	beq.n	80035da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	430a      	orrs	r2, r1
 80035d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d00a      	beq.n	80035fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	430a      	orrs	r2, r1
 80035fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003600:	f003 0304 	and.w	r3, r3, #4
 8003604:	2b00      	cmp	r3, #0
 8003606:	d00a      	beq.n	800361e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	430a      	orrs	r2, r1
 800361c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003622:	f003 0308 	and.w	r3, r3, #8
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00a      	beq.n	8003640 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	430a      	orrs	r2, r1
 800363e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003644:	f003 0310 	and.w	r3, r3, #16
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00a      	beq.n	8003662 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	430a      	orrs	r2, r1
 8003660:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003666:	f003 0320 	and.w	r3, r3, #32
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00a      	beq.n	8003684 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	430a      	orrs	r2, r1
 8003682:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800368c:	2b00      	cmp	r3, #0
 800368e:	d01a      	beq.n	80036c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	430a      	orrs	r2, r1
 80036a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036ae:	d10a      	bne.n	80036c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	430a      	orrs	r2, r1
 80036c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00a      	beq.n	80036e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	430a      	orrs	r2, r1
 80036e6:	605a      	str	r2, [r3, #4]
  }
}
 80036e8:	bf00      	nop
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b086      	sub	sp, #24
 80036f8:	af02      	add	r7, sp, #8
 80036fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003704:	f7fd f848 	bl	8000798 <HAL_GetTick>
 8003708:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0308 	and.w	r3, r3, #8
 8003714:	2b08      	cmp	r3, #8
 8003716:	d10e      	bne.n	8003736 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003718:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800371c:	9300      	str	r3, [sp, #0]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2200      	movs	r2, #0
 8003722:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 f82d 	bl	8003786 <UART_WaitOnFlagUntilTimeout>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d001      	beq.n	8003736 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e023      	b.n	800377e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0304 	and.w	r3, r3, #4
 8003740:	2b04      	cmp	r3, #4
 8003742:	d10e      	bne.n	8003762 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003744:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003748:	9300      	str	r3, [sp, #0]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 f817 	bl	8003786 <UART_WaitOnFlagUntilTimeout>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d001      	beq.n	8003762 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e00d      	b.n	800377e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2220      	movs	r2, #32
 8003766:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2220      	movs	r2, #32
 800376c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3710      	adds	r7, #16
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003786:	b580      	push	{r7, lr}
 8003788:	b09c      	sub	sp, #112	; 0x70
 800378a:	af00      	add	r7, sp, #0
 800378c:	60f8      	str	r0, [r7, #12]
 800378e:	60b9      	str	r1, [r7, #8]
 8003790:	603b      	str	r3, [r7, #0]
 8003792:	4613      	mov	r3, r2
 8003794:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003796:	e0a5      	b.n	80038e4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003798:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800379a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800379e:	f000 80a1 	beq.w	80038e4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037a2:	f7fc fff9 	bl	8000798 <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d302      	bcc.n	80037b8 <UART_WaitOnFlagUntilTimeout+0x32>
 80037b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d13e      	bne.n	8003836 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037c0:	e853 3f00 	ldrex	r3, [r3]
 80037c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80037c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80037cc:	667b      	str	r3, [r7, #100]	; 0x64
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	461a      	mov	r2, r3
 80037d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037d8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80037dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80037de:	e841 2300 	strex	r3, r2, [r1]
 80037e2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80037e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1e6      	bne.n	80037b8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	3308      	adds	r3, #8
 80037f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037f4:	e853 3f00 	ldrex	r3, [r3]
 80037f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80037fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037fc:	f023 0301 	bic.w	r3, r3, #1
 8003800:	663b      	str	r3, [r7, #96]	; 0x60
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	3308      	adds	r3, #8
 8003808:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800380a:	64ba      	str	r2, [r7, #72]	; 0x48
 800380c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800380e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003810:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003812:	e841 2300 	strex	r3, r2, [r1]
 8003816:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003818:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1e5      	bne.n	80037ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2220      	movs	r2, #32
 8003822:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2220      	movs	r2, #32
 8003828:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e067      	b.n	8003906 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0304 	and.w	r3, r3, #4
 8003840:	2b00      	cmp	r3, #0
 8003842:	d04f      	beq.n	80038e4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	69db      	ldr	r3, [r3, #28]
 800384a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800384e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003852:	d147      	bne.n	80038e4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800385c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003866:	e853 3f00 	ldrex	r3, [r3]
 800386a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800386c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003872:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	461a      	mov	r2, r3
 800387a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800387c:	637b      	str	r3, [r7, #52]	; 0x34
 800387e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003880:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003882:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003884:	e841 2300 	strex	r3, r2, [r1]
 8003888:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800388a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800388c:	2b00      	cmp	r3, #0
 800388e:	d1e6      	bne.n	800385e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	3308      	adds	r3, #8
 8003896:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	e853 3f00 	ldrex	r3, [r3]
 800389e:	613b      	str	r3, [r7, #16]
   return(result);
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	f023 0301 	bic.w	r3, r3, #1
 80038a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	3308      	adds	r3, #8
 80038ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80038b0:	623a      	str	r2, [r7, #32]
 80038b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b4:	69f9      	ldr	r1, [r7, #28]
 80038b6:	6a3a      	ldr	r2, [r7, #32]
 80038b8:	e841 2300 	strex	r3, r2, [r1]
 80038bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d1e5      	bne.n	8003890 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2220      	movs	r2, #32
 80038c8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2220      	movs	r2, #32
 80038ce:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2220      	movs	r2, #32
 80038d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e010      	b.n	8003906 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	69da      	ldr	r2, [r3, #28]
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	4013      	ands	r3, r2
 80038ee:	68ba      	ldr	r2, [r7, #8]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	bf0c      	ite	eq
 80038f4:	2301      	moveq	r3, #1
 80038f6:	2300      	movne	r3, #0
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	461a      	mov	r2, r3
 80038fc:	79fb      	ldrb	r3, [r7, #7]
 80038fe:	429a      	cmp	r2, r3
 8003900:	f43f af4a 	beq.w	8003798 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3770      	adds	r7, #112	; 0x70
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
	...

08003910 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b096      	sub	sp, #88	; 0x58
 8003914:	af00      	add	r7, sp, #0
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	60b9      	str	r1, [r7, #8]
 800391a:	4613      	mov	r3, r2
 800391c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	68ba      	ldr	r2, [r7, #8]
 8003922:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	88fa      	ldrh	r2, [r7, #6]
 8003928:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2222      	movs	r2, #34	; 0x22
 8003938:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800393e:	2b00      	cmp	r3, #0
 8003940:	d02b      	beq.n	800399a <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003946:	4a40      	ldr	r2, [pc, #256]	; (8003a48 <UART_Start_Receive_DMA+0x138>)
 8003948:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800394e:	4a3f      	ldr	r2, [pc, #252]	; (8003a4c <UART_Start_Receive_DMA+0x13c>)
 8003950:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003956:	4a3e      	ldr	r2, [pc, #248]	; (8003a50 <UART_Start_Receive_DMA+0x140>)
 8003958:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800395e:	2200      	movs	r2, #0
 8003960:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	3324      	adds	r3, #36	; 0x24
 800396c:	4619      	mov	r1, r3
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003972:	461a      	mov	r2, r3
 8003974:	88fb      	ldrh	r3, [r7, #6]
 8003976:	f7fd f873 	bl	8000a60 <HAL_DMA_Start_IT>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00c      	beq.n	800399a <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2210      	movs	r2, #16
 8003984:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2200      	movs	r2, #0
 800398c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2220      	movs	r2, #32
 8003994:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e051      	b.n	8003a3e <UART_Start_Receive_DMA+0x12e>
    }
  }
  __HAL_UNLOCK(huart);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039aa:	e853 3f00 	ldrex	r3, [r3]
 80039ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80039b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039b6:	657b      	str	r3, [r7, #84]	; 0x54
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	461a      	mov	r2, r3
 80039be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80039c2:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80039c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039c8:	e841 2300 	strex	r3, r2, [r1]
 80039cc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80039ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d1e6      	bne.n	80039a2 <UART_Start_Receive_DMA+0x92>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	3308      	adds	r3, #8
 80039da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039de:	e853 3f00 	ldrex	r3, [r3]
 80039e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80039e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e6:	f043 0301 	orr.w	r3, r3, #1
 80039ea:	653b      	str	r3, [r7, #80]	; 0x50
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	3308      	adds	r3, #8
 80039f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80039f4:	637a      	str	r2, [r7, #52]	; 0x34
 80039f6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80039fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039fc:	e841 2300 	strex	r3, r2, [r1]
 8003a00:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d1e5      	bne.n	80039d4 <UART_Start_Receive_DMA+0xc4>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	3308      	adds	r3, #8
 8003a0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	e853 3f00 	ldrex	r3, [r3]
 8003a16:	613b      	str	r3, [r7, #16]
   return(result);
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	3308      	adds	r3, #8
 8003a26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a28:	623a      	str	r2, [r7, #32]
 8003a2a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a2c:	69f9      	ldr	r1, [r7, #28]
 8003a2e:	6a3a      	ldr	r2, [r7, #32]
 8003a30:	e841 2300 	strex	r3, r2, [r1]
 8003a34:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d1e5      	bne.n	8003a08 <UART_Start_Receive_DMA+0xf8>

  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3758      	adds	r7, #88	; 0x58
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	08003b67 	.word	0x08003b67
 8003a4c:	08003c85 	.word	0x08003c85
 8003a50:	08003cbd 	.word	0x08003cbd

08003a54 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b089      	sub	sp, #36	; 0x24
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	e853 3f00 	ldrex	r3, [r3]
 8003a68:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003a70:	61fb      	str	r3, [r7, #28]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	461a      	mov	r2, r3
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	61bb      	str	r3, [r7, #24]
 8003a7c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7e:	6979      	ldr	r1, [r7, #20]
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	e841 2300 	strex	r3, r2, [r1]
 8003a86:	613b      	str	r3, [r7, #16]
   return(result);
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1e6      	bne.n	8003a5c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2220      	movs	r2, #32
 8003a92:	679a      	str	r2, [r3, #120]	; 0x78
}
 8003a94:	bf00      	nop
 8003a96:	3724      	adds	r7, #36	; 0x24
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b095      	sub	sp, #84	; 0x54
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ab0:	e853 3f00 	ldrex	r3, [r3]
 8003ab4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003abc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ac6:	643b      	str	r3, [r7, #64]	; 0x40
 8003ac8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003acc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ace:	e841 2300 	strex	r3, r2, [r1]
 8003ad2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1e6      	bne.n	8003aa8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	3308      	adds	r3, #8
 8003ae0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae2:	6a3b      	ldr	r3, [r7, #32]
 8003ae4:	e853 3f00 	ldrex	r3, [r3]
 8003ae8:	61fb      	str	r3, [r7, #28]
   return(result);
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	f023 0301 	bic.w	r3, r3, #1
 8003af0:	64bb      	str	r3, [r7, #72]	; 0x48
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	3308      	adds	r3, #8
 8003af8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003afa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003afc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003afe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b02:	e841 2300 	strex	r3, r2, [r1]
 8003b06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1e5      	bne.n	8003ada <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d118      	bne.n	8003b48 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	e853 3f00 	ldrex	r3, [r3]
 8003b22:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	f023 0310 	bic.w	r3, r3, #16
 8003b2a:	647b      	str	r3, [r7, #68]	; 0x44
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	461a      	mov	r2, r3
 8003b32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b34:	61bb      	str	r3, [r7, #24]
 8003b36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b38:	6979      	ldr	r1, [r7, #20]
 8003b3a:	69ba      	ldr	r2, [r7, #24]
 8003b3c:	e841 2300 	strex	r3, r2, [r1]
 8003b40:	613b      	str	r3, [r7, #16]
   return(result);
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1e6      	bne.n	8003b16 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2220      	movs	r2, #32
 8003b4c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003b5a:	bf00      	nop
 8003b5c:	3754      	adds	r7, #84	; 0x54
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr

08003b66 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b09c      	sub	sp, #112	; 0x70
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b72:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	2b20      	cmp	r3, #32
 8003b7a:	d070      	beq.n	8003c5e <UART_DMAReceiveCplt+0xf8>
  {
    huart->RxXferCount = 0U;
 8003b7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b8c:	e853 3f00 	ldrex	r3, [r3]
 8003b90:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003b92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b98:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ba2:	65bb      	str	r3, [r7, #88]	; 0x58
 8003ba4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003ba8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003baa:	e841 2300 	strex	r3, r2, [r1]
 8003bae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003bb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1e6      	bne.n	8003b84 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	3308      	adds	r3, #8
 8003bbc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bc0:	e853 3f00 	ldrex	r3, [r3]
 8003bc4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bc8:	f023 0301 	bic.w	r3, r3, #1
 8003bcc:	667b      	str	r3, [r7, #100]	; 0x64
 8003bce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	3308      	adds	r3, #8
 8003bd4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003bd6:	647a      	str	r2, [r7, #68]	; 0x44
 8003bd8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bda:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003bdc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003bde:	e841 2300 	strex	r3, r2, [r1]
 8003be2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003be4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1e5      	bne.n	8003bb6 <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	3308      	adds	r3, #8
 8003bf0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf4:	e853 3f00 	ldrex	r3, [r3]
 8003bf8:	623b      	str	r3, [r7, #32]
   return(result);
 8003bfa:	6a3b      	ldr	r3, [r7, #32]
 8003bfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c00:	663b      	str	r3, [r7, #96]	; 0x60
 8003c02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	3308      	adds	r3, #8
 8003c08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003c0a:	633a      	str	r2, [r7, #48]	; 0x30
 8003c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c12:	e841 2300 	strex	r3, r2, [r1]
 8003c16:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1e5      	bne.n	8003bea <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003c1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c20:	2220      	movs	r2, #32
 8003c22:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d118      	bne.n	8003c5e <UART_DMAReceiveCplt+0xf8>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	e853 3f00 	ldrex	r3, [r3]
 8003c38:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f023 0310 	bic.w	r3, r3, #16
 8003c40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	461a      	mov	r2, r3
 8003c48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c4a:	61fb      	str	r3, [r7, #28]
 8003c4c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4e:	69b9      	ldr	r1, [r7, #24]
 8003c50:	69fa      	ldr	r2, [r7, #28]
 8003c52:	e841 2300 	strex	r3, r2, [r1]
 8003c56:	617b      	str	r3, [r7, #20]
   return(result);
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d1e6      	bne.n	8003c2c <UART_DMAReceiveCplt+0xc6>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d107      	bne.n	8003c76 <UART_DMAReceiveCplt+0x110>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c68:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003c70:	f7ff fabc 	bl	80031ec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003c74:	e002      	b.n	8003c7c <UART_DMAReceiveCplt+0x116>
    HAL_UART_RxCpltCallback(huart);
 8003c76:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003c78:	f7fc fabc 	bl	80001f4 <HAL_UART_RxCpltCallback>
}
 8003c7c:	bf00      	nop
 8003c7e:	3770      	adds	r7, #112	; 0x70
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c90:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d109      	bne.n	8003cae <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003ca0:	085b      	lsrs	r3, r3, #1
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	68f8      	ldr	r0, [r7, #12]
 8003ca8:	f7ff faa0 	bl	80031ec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003cac:	e002      	b.n	8003cb4 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8003cae:	68f8      	ldr	r0, [r7, #12]
 8003cb0:	f7ff fa88 	bl	80031c4 <HAL_UART_RxHalfCpltCallback>
}
 8003cb4:	bf00      	nop
 8003cb6:	3710      	adds	r7, #16
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b086      	sub	sp, #24
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cce:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cd4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce0:	2b80      	cmp	r3, #128	; 0x80
 8003ce2:	d109      	bne.n	8003cf8 <UART_DMAError+0x3c>
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	2b21      	cmp	r3, #33	; 0x21
 8003ce8:	d106      	bne.n	8003cf8 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8003cf2:	6978      	ldr	r0, [r7, #20]
 8003cf4:	f7ff feae 	bl	8003a54 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d02:	2b40      	cmp	r3, #64	; 0x40
 8003d04:	d109      	bne.n	8003d1a <UART_DMAError+0x5e>
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2b22      	cmp	r3, #34	; 0x22
 8003d0a:	d106      	bne.n	8003d1a <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8003d14:	6978      	ldr	r0, [r7, #20]
 8003d16:	f7ff fec3 	bl	8003aa0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d20:	f043 0210 	orr.w	r2, r3, #16
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d2a:	6978      	ldr	r0, [r7, #20]
 8003d2c:	f7ff fa54 	bl	80031d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d30:	bf00      	nop
 8003d32:	3718      	adds	r7, #24
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d44:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d56:	68f8      	ldr	r0, [r7, #12]
 8003d58:	f7ff fa3e 	bl	80031d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d5c:	bf00      	nop
 8003d5e:	3710      	adds	r7, #16
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b088      	sub	sp, #32
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	e853 3f00 	ldrex	r3, [r3]
 8003d78:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d80:	61fb      	str	r3, [r7, #28]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	461a      	mov	r2, r3
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	61bb      	str	r3, [r7, #24]
 8003d8c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8e:	6979      	ldr	r1, [r7, #20]
 8003d90:	69ba      	ldr	r2, [r7, #24]
 8003d92:	e841 2300 	strex	r3, r2, [r1]
 8003d96:	613b      	str	r3, [r7, #16]
   return(result);
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1e6      	bne.n	8003d6c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2220      	movs	r2, #32
 8003da2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f7ff fa00 	bl	80031b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003db0:	bf00      	nop
 8003db2:	3720      	adds	r7, #32
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003dc0:	bf00      	nop
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <__libc_init_array>:
 8003dcc:	b570      	push	{r4, r5, r6, lr}
 8003dce:	4d0d      	ldr	r5, [pc, #52]	; (8003e04 <__libc_init_array+0x38>)
 8003dd0:	4c0d      	ldr	r4, [pc, #52]	; (8003e08 <__libc_init_array+0x3c>)
 8003dd2:	1b64      	subs	r4, r4, r5
 8003dd4:	10a4      	asrs	r4, r4, #2
 8003dd6:	2600      	movs	r6, #0
 8003dd8:	42a6      	cmp	r6, r4
 8003dda:	d109      	bne.n	8003df0 <__libc_init_array+0x24>
 8003ddc:	4d0b      	ldr	r5, [pc, #44]	; (8003e0c <__libc_init_array+0x40>)
 8003dde:	4c0c      	ldr	r4, [pc, #48]	; (8003e10 <__libc_init_array+0x44>)
 8003de0:	f000 f820 	bl	8003e24 <_init>
 8003de4:	1b64      	subs	r4, r4, r5
 8003de6:	10a4      	asrs	r4, r4, #2
 8003de8:	2600      	movs	r6, #0
 8003dea:	42a6      	cmp	r6, r4
 8003dec:	d105      	bne.n	8003dfa <__libc_init_array+0x2e>
 8003dee:	bd70      	pop	{r4, r5, r6, pc}
 8003df0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003df4:	4798      	blx	r3
 8003df6:	3601      	adds	r6, #1
 8003df8:	e7ee      	b.n	8003dd8 <__libc_init_array+0xc>
 8003dfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dfe:	4798      	blx	r3
 8003e00:	3601      	adds	r6, #1
 8003e02:	e7f2      	b.n	8003dea <__libc_init_array+0x1e>
 8003e04:	08003e74 	.word	0x08003e74
 8003e08:	08003e74 	.word	0x08003e74
 8003e0c:	08003e74 	.word	0x08003e74
 8003e10:	08003e78 	.word	0x08003e78

08003e14 <memset>:
 8003e14:	4402      	add	r2, r0
 8003e16:	4603      	mov	r3, r0
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d100      	bne.n	8003e1e <memset+0xa>
 8003e1c:	4770      	bx	lr
 8003e1e:	f803 1b01 	strb.w	r1, [r3], #1
 8003e22:	e7f9      	b.n	8003e18 <memset+0x4>

08003e24 <_init>:
 8003e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e26:	bf00      	nop
 8003e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e2a:	bc08      	pop	{r3}
 8003e2c:	469e      	mov	lr, r3
 8003e2e:	4770      	bx	lr

08003e30 <_fini>:
 8003e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e32:	bf00      	nop
 8003e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e36:	bc08      	pop	{r3}
 8003e38:	469e      	mov	lr, r3
 8003e3a:	4770      	bx	lr
